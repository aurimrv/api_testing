package org.restscs;
import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-08-01T19:55:31.002643-03:00[America/Araguaina]
 * <br>
 * The generated test suite contains 119 tests
 * <br>
 * Covered targets: 1029
 * <br>
 * Used time: 1h 0m 0s
 * <br>
 * Needed budget for current results: 61%
 * <br>
 * This file contains one example of each category of fault. The test cases in this file are a subset of the set of test cases likely to indicate faults.
 */
public class seed05_EvoMaster_fault_representatives_Test {

    
    private static final SutHandler controller = new em.embedded.org.restscs.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/v2/api-docs")
                .then()
                .statusCode(200);
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/ordered4/z6MO/_EM_674_XYZ_/_EM_676_XYZ_/_EM_675_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("unordered"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_5_XYZ_")
                .get(baseUrlOfSut + "/api/ordered4/_EM_0_XYZ_/_EM_1_XYZ_/_EM_3_XYZ_/_EM_2_XYZ_?EMextraParam123=_EM_4_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("unordered"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/ordered4/ReXrIo/qb/x9aYChwgc9N1/25ZODzNoXqWq")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("unordered"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/ordered4/aWJgpJ/_EM_1366_XYZ_/_EM_1368_XYZ_/_EM_1367_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("unordered"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_27_XYZ_")
                .get(baseUrlOfSut + "/api/filesuffix/_EM_24_XYZ_/_EM_25_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1446_XYZ_")
                .get(baseUrlOfSut + "/api/calc/pi/0.48637956327230936/1.0458846911792725?EMextraParam123=_EM_1445_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("3.141592653589793"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_7() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1941_XYZ_")
                .get(baseUrlOfSut + "/api/pat/_EM_1940_XYZ_/g")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_8() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/ordered4/aWJgpJ/wY07sC/rkaJhfF3NU/%3ET?EMextraParam123=_EM_1369_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("unordered"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_9() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/ordered4/aWJgpJ/wY07sE/rkaJhfF3NU/_EM_3109_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("unordered"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_10() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_7_XYZ_")
                .get(baseUrlOfSut + "/api/calc/e/2.2471164185778946E307/1.1940464206983676")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("2.718281828459045"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_11() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_72_XYZ_")
                .get(baseUrlOfSut + "/api/cookie/userid/am/_EM_69_XYZ_?EMextraParam123=_EM_71_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_12() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/ordered4/aWJgpJ/w%5D07sE/cL6m/w%5D07sE")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("unordered"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_13() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_12_XYZ_")
                .get(baseUrlOfSut + "/api/cookie/_EM_8_XYZ_/_EM_10_XYZ_/_EM_9_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_14() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_847_XYZ_")
                .get(baseUrlOfSut + "/api/title/male/mr?EMextraParam123=_EM_846_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("1"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_15() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/ordered4/aWJgpJ/w%5D07sE/_EM_36430_XYZ_/w%5D07sE")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("unordered"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_16() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_41_XYZ_")
                .get(baseUrlOfSut + "/api/title/_EM_38_XYZ_/_EM_39_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("-1"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_17() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1195_XYZ_")
                .get(baseUrlOfSut + "/api/calc/sqrt/0.02201827134258383/-0.8180459512267705")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0.14838554964208553"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_18() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_7511_XYZ_")
                .get(baseUrlOfSut + "/api/cookie/userid/_EM_8761_XYZ_/_EM_7508_XYZ_?EMextraParam123=_EM_7510_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_19() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/notypevar/-3149/_EM_831_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_20() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/title/male/dr")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("1"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_21() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_29608_XYZ_")
                .get(baseUrlOfSut + "/api/title/female/mRs?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_22() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/cookie/userid/useRKMeXf/3")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("1"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_23() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_12_XYZ_")
                .get(baseUrlOfSut + "/api/cookie/session/RyqrzExvPQdkgv/_EM_250_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("2"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_24() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/notypevar/28/_EM_14715_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("3"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_25() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/notypevar/7/bsUOL")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("3"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_26() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_611_XYZ_")
                .get(baseUrlOfSut + "/api/notypevar/947/j88GD4faTg?EMextraParam123=_EM_610_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("3"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_27() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1370_XYZ_")
                .get(baseUrlOfSut + "/api/ordered4/aWJgpJ/w%5D07wE/NwXgkU/y%5D0Ut")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("unordered"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_28() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_7_XYZ_")
                .get(baseUrlOfSut + "/api/calc/log/2.2471164185778946E307/8.988465674311579E307?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("707.7032713517042"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_29() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_847_XYZ_")
                .get(baseUrlOfSut + "/api/title/none/dr?EMextraParam123=_EM_846_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("2"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_30() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/cookie/session/am/P3hXGP2KFgxO6")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("2"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_31() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_847_XYZ_")
                .get(baseUrlOfSut + "/api/title/male/sir")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("1"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_32() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/title/female/mIsS")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_33() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/ordered4/_WJgpK/%60C7_k/lwBwsa/aWJgpK")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("increasing"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_34() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1370_XYZ_")
                .get(baseUrlOfSut + "/api/ordered4/aWJgpK/%5D_%60OZk/%5DWJgp/%5DWJgpK")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("decreasing"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_35() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/ordered4/aWJgpK/M@@_%7F/lwBwsa/aWJgpK?EMextraParam123=_EM_1369_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("unordered"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_36() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/ordered4/aWJgpK/%5D@7_%7F/lwBwsa/YWJgpK")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("unordered"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_37() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1195_XYZ_")
                .get(baseUrlOfSut + "/api/calc/sine/0.02201827134258383/0.23862580062295102")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0.02201649229370405"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_38() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/title/none/rev")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("2"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_39() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/title/male/rev")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("1"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_40() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/title/female/ms")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_41() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/text2txt/are/_EM_305_XYZ_/UcJVDYm_?EMextraParam123=_EM_239_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("r"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_42() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_7_XYZ_")
                .get(baseUrlOfSut + "/api/calc/cosine/-1.5503983506914583/1.1940464206983676?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0.02039656160995624"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_43() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/title/none/rthon")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("2"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_44() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_847_XYZ_")
                .get(baseUrlOfSut + "/api/title/male/rthon?EMextraParam123=_EM_846_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("1"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_45() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/title/female/dr?EMextraParam123=_EM_846_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_46() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/text2txt/for/_EM_258_XYZ_/_EM_75_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("4"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_47() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/title/male/_EM_893_XYZ_?EMextraParam123=_EM_846_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("-1"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_48() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/title/none/_EM_890_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("-1"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_49() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_7_XYZ_")
                .get(baseUrlOfSut + "/api/calc/tangent/0.333481559581813/8.988465674311579E307")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0.34641955535064767"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_50() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/title/none/prof?EMextraParam123=_EM_830_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("2"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_51() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/title/male/prof?EMextraParam123=_EM_830_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("1"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_52() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_52274_XYZ_")
                .get(baseUrlOfSut + "/api/title/female/lady")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_53() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/text2txt/two/_EM_242_XYZ_/_EM_289_XYZ_?EMextraParam123=_EM_244_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("2"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_54() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_240_XYZ_")
                .get(baseUrlOfSut + "/api/text2txt/four/the/way")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("4"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_55() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_240_XYZ_")
                .get(baseUrlOfSut + "/api/text2txt/you/_EM_293_XYZ_/_EM_294_XYZ_?EMextraParam123=_EM_239_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("u"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_56() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_240_XYZ_")
                .get(baseUrlOfSut + "/api/text2txt/and/_EM_293_XYZ_/UcJVDYm_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("n"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_57() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/text2txt/see/you/_EM_12815_XYZ_?EMextraParam123=_EM_2966_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("cu"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_58() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/calc/PLUS/465.9130527592334/422252.10452553607")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("422718.0175782953"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_59() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2967_XYZ_")
                .get(baseUrlOfSut + "/api/text2txt/see/_EM_2965_XYZ_/_EM_12794_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_60() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_240_XYZ_")
                .get(baseUrlOfSut + "/api/text2txt/by/_EM_305_XYZ_/UcJVDYm_")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_61() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/title/female/rev")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_62() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/thur55aug")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("date"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_63() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_7_XYZ_")
                .get(baseUrlOfSut + "/api/calc/subtract/-1.5503983506914583/-1.4654472893854953")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("-0.08495106130596297"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_64() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_6199_XYZ_")
                .get(baseUrlOfSut + "/api/costfuns/5/_EM_6197_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("10"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_65() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_20_XYZ_")
                .get(baseUrlOfSut + "/api/costfuns/1173177946/_EM_18_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("10"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_66() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/costfuns/-4/baab?EMextraParam123=_EM_197_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("10"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_67() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_240_XYZ_")
                .get(baseUrlOfSut + "/api/text2txt/by/the/_EM_2832_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .body(isEmptyOrNullString());
        
    }
    
    
    @Test(timeout = 60000)
    public void test_68() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_240_XYZ_")
                .get(baseUrlOfSut + "/api/text2txt/by/the/way")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("btw"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_69() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/title/female/rthon")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_70() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_94_XYZ_")
                .get(baseUrlOfSut + "/api/costfuns/131230/h13g")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("10"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_71() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_198_XYZ_")
                .get(baseUrlOfSut + "/api/costfuns/-928/baab?EMextraParam123=_EM_197_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("10"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_72() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_33_XYZ_")
                .get(baseUrlOfSut + "/api/pat/_EM_31_XYZ_?EMextraParam123=_EM_32_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("none"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_73() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_1724_XYZ_")
                .get(baseUrlOfSut + "/api/pat/57.07e+31?EMextraParam123=_EM_1723_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("fpe"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_74() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_7_XYZ_")
                .get(baseUrlOfSut + "/api/calc/multiply/2.2471164185778946E307/8.988465674311579E307?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("Infinity"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_75() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/api/title/female/_EM_890_XYZ_?EMextraParam123=_EM_830_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("-1"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_76() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/kw44wkpuPkMCHSBI2/kw4;cxpuPkAAhG")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_77() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/title/female/prof")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_78() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/calc/_EM_6_XYZ_/0.4507340710434795/0.35455214569387994?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("0.0"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_79() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_7_XYZ_")
                .get(baseUrlOfSut + "/api/calc/divide/2.2471164185778946E307/1.1940464206983676?EMextraParam123=42")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("1.8819338843322463E307"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_80() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/%3FR4si5is4X/is4;cx%C2%80uPk9AhKpCC")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("2"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_81() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_5066_XYZ_")
                .get(baseUrlOfSut + "/api/pat/%3FR4si5iG7X/is4;cx%C2%80uPk9AhKpC")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("2"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_82() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/dateparse/mon/mar")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("4"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_83() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/kw44expuPk9AhKWn2/kw4;cxpuPk9AhKW")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("1"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_84() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_518_XYZ_")
                .get(baseUrlOfSut + "/api/dateparse/tue/oct")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("11"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_85() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_518_XYZ_")
                .get(baseUrlOfSut + "/api/dateparse/wed/sep")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("10"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_86() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_518_XYZ_")
                .get(baseUrlOfSut + "/api/dateparse/wed/apr?EMextraParam123=_EM_517_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("5"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_87() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/dateparse/thur/Q8B7mpeUC2C9EM1")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("1"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_88() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/dateparse/fri/oct")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("11"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_89() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/dateparse/fri/jun")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("7"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_90() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_138_XYZ_")
                .get(baseUrlOfSut + "/api/dateparse/sat/may")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("6"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_91() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/dateparse/_EM_595_XYZ_/jan")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("1"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_92() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/dateparse/_EM_595_XYZ_/aug")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("8"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_93() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_55_XYZ_")
                .get(baseUrlOfSut + "/api/dateparse/_EM_595_XYZ_q/dec?EMextraParam123=_EM_54_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("12"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_94() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_55_XYZ_")
                .get(baseUrlOfSut + "/api/dateparse/sun/feb")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("3"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_95() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/dateparse/sun/jul")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("8"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_96() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_138_XYZ_")
                .get(baseUrlOfSut + "/api/dateparse/sun/nov")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("text/plain")
                .body(containsString("12"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_97() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_30_XYZ_")
                .get(baseUrlOfSut + "/api/notypevar/0/p9jz%5CH0r")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_98() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2500_XYZ_")
                .get(baseUrlOfSut + "/api/pat/_EM_7068_XYZ_/%5CBrw3?EMextraParam123=_EM_2499_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_99() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_7511_XYZ_")
                .get(baseUrlOfSut + "/api/cookie/session/_EM_WN6%5B_ZYZ%5C/_EM_7508_XYZ_?EMextraParam123=_EM_7510_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_100() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/filesuffix/BhY%5CbtceaAeCp/_EM_2445_XYZ_?EMextraParam123=_EM_2446_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_101() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_18424_XYZ_")
                .get(baseUrlOfSut + "/api/ordered4/lKezL%5CsM/_EM_18452_XYZ_/_EM_18454_XYZ_/_EM_18453_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_102() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/text2txt/_EM_20925_XYZ_/DEvk_YmREME%5CTZku/_EM_20926_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_103() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/calc/G%5CCT/-1.1260828978691995E308/-8.988465674311579E307?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_104() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_29608_XYZ_")
                .get(baseUrlOfSut + "/api/title/female/kGR%5C?EMextraParam123=42")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_105() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/DsHj%5C")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_106() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/costfuns/553/%5C4")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_107() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/dateparse/fGpvL%5CUmh0a2/_EM_132200_XYZ_")
                .then()
                .statusCode(400)
                .assertThat()
                .body(isEmptyOrNullString());
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test(timeout = 60000)
    public void test_108() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/pat/http//:g2/na?EMextraParam123=_EM_662_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/pat/http//:g2/na"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_109() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_72_XYZ_")
                .get(baseUrlOfSut + "/api/cookie/userid/am/%C2%854")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/cookie/userid/am/%C2%854"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_110() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_5066_XYZ_")
                .get(baseUrlOfSut + "/api/pat/kw43cxp%C2%85Pk9AhKWn2/kw4;cxpwPk9AhKW?EMextraParam123=_EM_5065_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/pat/kw43cxp%C2%85Pk9AhKWn2/kw4;cxpwPk9AhKW"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_111() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/text2txt/_EM_8275_XYZ_/_EM_8276_XYZ_/;X")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/text2txt/_EM_8275_XYZ_/_EM_8276_XYZ_/;X"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_112() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/ordered4/_EM_53637_XYZ_/w%5D07wE/_EM_53638_XYZ_/%C2%85%5D0Ut")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/ordered4/_EM_53637_XYZ_/w%5D07wE/_EM_53638_XYZ_/%C2%85%5D0Ut"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_113() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2447_XYZ_")
                .get(baseUrlOfSut + "/api/filesuffix/;z/_EM_2445_XYZ_?EMextraParam123=_EM_2446_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/filesuffix/;z/_EM_2445_XYZ_"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_114() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/dateparse/UrSxoLRNJjul/;W11EkjJe9")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/dateparse/UrSxoLRNJjul/;W11EkjJe9"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_115() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/notypevar/555/;5y5rYCq")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/notypevar/555/;5y5rYCq"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_116() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/calc/;jr;W0Y;%5Bp3/0.6270380974894488/0.5543575628319338")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/calc/;jr;W0Y;%5Bp3/0.6270380974894488/0.5543575628319338"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_117() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/title/Lf7D2fsOcN91JRr/;or6Hi3ylXHgiF%3C")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/title/Lf7D2fsOcN91JRr/;or6Hi3ylXHgiF%3C"));
        
    }
    
    
    @Test(timeout = 60000)
    public void test_118() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/costfuns/761/;EM_201405UXYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(404.0))
                .body("'error'", containsString("Not Found"))
                .body("'message'", containsString("No message available"))
                .body("'path'", containsString("/api/costfuns/761/;EM_201405UXYZ_"));
        
    }


}
