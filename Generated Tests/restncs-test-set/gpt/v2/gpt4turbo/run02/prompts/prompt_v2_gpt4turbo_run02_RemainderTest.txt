Create a white box test suite in JUnit 4 and Java 8 using REST Assured for the Java code delimited by *****. Use the swagger documentation delimited by ##### to provide complementary information about the application. The objective of this test suite is to maximize code coverage (including decision coverage), ensure compliance with the API specification, and validate the robustness, schema conformity, and business rule enforcement of the API.

Follow these six instructions when generating the test code:

Instruction 1. Package Declaration: Add this package line at the beginning of the test code file: package org.restncs;

Instruction 2. Imports: Include the following Java imports:
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Map;
import java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import org.evomaster.client.java.controller.SutHandler;
import io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import io.restassured.config.JsonConfig;
import io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import org.evomaster.client.java.controller.expect.ExpectationHandler;
import io.restassured.path.json.JsonPath;
import java.util.Arrays;


Instruction 3. Class Declaration: Create the class with the following declaration: 
public class v2_gpt4turbo_run02_RemainderTest

Instruction 4. Variable Declarations: Include these variables:
private static final SutHandler controller = new em.embedded.org.restncs.EmbeddedEvoMasterController();
private static String baseUrlOfSut;

Instruction 5. Setup and Teardown Methods: Include the following setup and teardown methods:
@BeforeClass
public static void initClass() {
    controller.setupForGeneratedTest();
    baseUrlOfSut = controller.startSut();
    controller.registerOrExecuteInitSqlCommandsIfNeeded();
    assertNotNull(baseUrlOfSut);
    RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
    RestAssured.useRelaxedHTTPSValidation();
    RestAssured.urlEncodingEnabled = false;
    RestAssured.config = RestAssured.config()
        .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
        .redirect(redirectConfig().followRedirects(false));
}

@AfterClass
public static void tearDown() {
    controller.stopSut();
}

@Before
public void initTest() {
    controller.resetStateOfSUT();
}

Instruction 6. Test Methods: Ensure the generated tests include:
* Error Scenarios: Tests that simulate invalid inputs or conditions that force the API to return 5xx status codes, particularly 500. Include assertions to verify these responses.

* Schema Validation: Tests that check whether the API responses conform to the OpenAPI schema. Ensure all required fields are present, data types match, and values are valid.

* Business Rule Enforcement: Tests that validate operations like POST, PUT, and DELETE follow the business rules, ensuring correct creation, modification, or deletion of resources. Any violations should be captured and asserted.


*****
package org.restncs.imp;

public class Remainder {
    public static int exe(int a, int b) {
        int r = 0 - 1;
        int cy = 0;
        int ny = 0;

        if (a == 0) ;
        else if (b == 0) ;
        else if (a > 0)
            if (b > 0)
                while ((a - ny) >= b) {
                    ny = ny + b;
                    r = a - ny;
                    cy = cy + 1;
                }
            else    // b<0
                //while((a+ny)>=Math.abs(b))
                while ((a + ny) >= ((b >= 0) ? b : -b)) {
                    ny = ny + b;
                    r = a + ny;
                    cy = cy - 1;
                }
        else    // a<0
            if (b > 0)
                //while(Math.abs(a+ny)>=b)
                while (((a + ny) >= 0 ? (a + ny) : -(a + ny)) >= b) {
                    ny = ny + b;
                    r = a + ny;
                    cy = cy - 1;
                }
            else
                while (b >= (a - ny)) {
                    ny = ny + b;
                    //r=Math.abs(a-ny);
                    r = ((a - ny) >= 0 ? (a - ny) : -(a - ny));
                    cy = cy + 1;
                }
        return r;
    }
}
*****
#####
{
  "swagger": "2.0",
  "info": {
    "description": "Examples of different numerical algorithms accessible via REST",
    "version": "1.0",
    "title": "API for Numerical Case Study (NCS)"
  },
  "schemes": [
    "http"
  ],
  "host": "localhost:8080",
  "basePath": "/",
  "tags": [
    {
      "name": "ncs-rest",
      "description": "Ncs Rest"
    }
  ],
  "paths": {
    "/api/bessj/{n}/{x}": {
      "get": {
        "tags": [
          "ncs-rest"
        ],
        "summary": "bessj",
        "operationId": "bessjUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "n",
            "in": "path",
            "description": "n",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "x",
            "in": "path",
            "description": "x",
            "required": true,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Dto",
              "originalRef": "Dto"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/api/expint/{n}/{x}": {
      "get": {
        "tags": [
          "ncs-rest"
        ],
        "summary": "expint",
        "operationId": "expintUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "n",
            "in": "path",
            "description": "n",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "x",
            "in": "path",
            "description": "x",
            "required": true,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Dto",
              "originalRef": "Dto"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/api/fisher/{m}/{n}/{x}": {
      "get": {
        "tags": [
          "ncs-rest"
        ],
        "summary": "fisher",
        "operationId": "fisherUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "m",
            "in": "path",
            "description": "m",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "n",
            "in": "path",
            "description": "n",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "x",
            "in": "path",
            "description": "x",
            "required": true,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Dto",
              "originalRef": "Dto"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/api/gammq/{a}/{x}": {
      "get": {
        "tags": [
          "ncs-rest"
        ],
        "summary": "gammq",
        "operationId": "gammqUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "a",
            "in": "path",
            "description": "a",
            "required": true,
            "type": "number",
            "format": "double"
          },
          {
            "name": "x",
            "in": "path",
            "description": "x",
            "required": true,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Dto",
              "originalRef": "Dto"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/api/remainder/{a}/{b}": {
      "get": {
        "tags": [
          "ncs-rest"
        ],
        "summary": "remainder",
        "operationId": "remainderUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "a",
            "in": "path",
            "description": "a",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "b",
            "in": "path",
            "description": "b",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Dto",
              "originalRef": "Dto"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/api/triangle/{a}/{b}/{c}": {
      "get": {
        "tags": [
          "ncs-rest"
        ],
        "summary": "Check the triangle type of the given three edges",
        "operationId": "checkTriangleUsingGET",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "a",
            "in": "path",
            "description": "First edge",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "b",
            "in": "path",
            "description": "Second edge",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "c",
            "in": "path",
            "description": "Third edge",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Dto",
              "originalRef": "Dto"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    }
  },
  "definitions": {
    "Dto": {
      "type": "object",
      "properties": {
        "resultAsDouble": {
          "type": "number",
          "format": "double"
        },
        "resultAsInt": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "Dto"
    }
  }
}
#####
