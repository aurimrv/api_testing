package em.embedded.market;
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-03T15:28:05.286-03:00[America/Araguaina]
 * <br>
 * The generated test suite contains 5 tests
 * <br>
 * Covered targets: 158
 * <br>
 * Used time: 1h 0m 4s
 * <br>
 * Needed budget for current results: 79%
 * <br>
 * This file contains test cases that are likely to indicate faults.
 */
public class seed07_EvoMaster_faults_Test {

    
    private static final SutHandler controller = new em.embedded.market.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList());
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * [test_0_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test @Timeout(60)
    public void test_0_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"_links\": [ " + 
                    " { " + 
                    " \"deprecation\": \"_EM_42_XYZ_\", " + 
                    " \"media\": \"_EM_45_XYZ_\", " + 
                    " \"title\": \"_EM_55_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"deprecation\": \"Z9VH\", " + 
                    " \"hreflang\": \"RuVgFQ8w1w\", " + 
                    " \"media\": \"_EM_58_XYZ_\", " + 
                    " \"name\": \"_EM_59_XYZ_\", " + 
                    " \"rel\": { " + 
                    " \"_EM_61_XYZ_\": \"_EM_62_XYZ_\", " + 
                    " \"_EM_63_XYZ_\": \"_EM_64_XYZ_\", " + 
                    " \"_EM_65_XYZ_\": \"_EM_66_XYZ_\" " + 
                    " }, " + 
                    " \"title\": \"_EM_67_XYZ_\", " + 
                    " \"type\": \"_EM_68_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"deprecation\": \"c32wyUesPRF\", " + 
                    " \"href\": \"_EM_69_XYZ_\", " + 
                    " \"hreflang\": \"_EM_70_XYZ_\", " + 
                    " \"title\": \"_EM_84_XYZ_\", " + 
                    " \"type\": \"_EM_85_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"href\": \"_EM_87_XYZ_\", " + 
                    " \"media\": \"mmlP\", " + 
                    " \"profile\": \"_EM_90_XYZ_\", " + 
                    " \"rel\": { " + 
                    " \"_EM_91_XYZ_\": \"_EM_92_XYZ_\", " + 
                    " \"_EM_93_XYZ_\": \"_EM_94_XYZ_\", " + 
                    " \"_EM_95_XYZ_\": \"_EM_96_XYZ_\", " + 
                    " \"_EM_97_XYZ_\": \"_EM_98_XYZ_\", " + 
                    " \"_EM_99_XYZ_\": \"_EM_100_XYZ_\" " + 
                    " }, " + 
                    " \"type\": \"_EM_102_XYZ_\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/cart?" + 
                    "name=_EM_41_XYZ_&" + 
                    "EMextraParam123=_EM_103_XYZ_")
                .then()
                .statusCode(500) // market/rest/exception/RestErrorResponse_50_getFieldErrors
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("JSON parse error: Expected relation name; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Expected relation name\n at [Source: (ByteArrayInputStream); line: 1, column: 13] (through reference chain: market.dto.CartItemDTO[\"_links\"])"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_1_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test @Timeout(60)
    public void test_1_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"_links\": [ " + 
                    " { " + 
                    " \"deprecation\": \"_EM_253_XYZ_\", " + 
                    " \"href\": \"_EM_254_XYZ_\", " + 
                    " \"hreflang\": \"_EM_255_XYZ_\", " + 
                    " \"name\": \"_EM_257_XYZ_\", " + 
                    " \"rel\": { " + 
                    " \"_EM_259_XYZ_\": \"_EM_260_XYZ_\", " + 
                    " \"_EM_261_XYZ_\": \"_EM_262_XYZ_\", " + 
                    " \"_EM_263_XYZ_\": \"_EM_264_XYZ_\", " + 
                    " \"_EM_265_XYZ_\": \"_EM_266_XYZ_\", " + 
                    " \"_EM_267_XYZ_\": \"_EM_268_XYZ_\" " + 
                    " } " + 
                    " }, " + 
                    " { " + 
                    " \"href\": \"pzSH8h7XS\", " + 
                    " \"profile\": \"_EM_275_XYZ_\", " + 
                    " \"title\": \"_EM_284_XYZ_\", " + 
                    " \"type\": \"_EM_285_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"hreflang\": \"_EM_288_XYZ_\", " + 
                    " \"media\": \"_EM_289_XYZ_\", " + 
                    " \"name\": \"_EM_290_XYZ_\", " + 
                    " \"profile\": \"_EM_291_XYZ_\", " + 
                    " \"type\": \"_EM_297_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"address\": \"_EM_298_XYZ_\", " + 
                    " \"email\": \"_EM_299_XYZ_\", " + 
                    " \"name\": \" \", " + 
                    " \"password\": \"4\", " + 
                    " \"phone\": \"_postfix\" " + 
                    " } ")
                .post(baseUrlOfSut + "/register?EMextraParam123=_EM_300_XYZ_")
                .then()
                .statusCode(500) // market/rest/exception/RestErrorResponse_50_getFieldErrors
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("JSON parse error: Expected relation name; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Expected relation name\n at [Source: (ByteArrayInputStream); line: 1, column: 13] (through reference chain: market.dto.UserDTO[\"_links\"])"))
                .body("'description'", containsString("uri=/register"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_2_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test @Timeout(60)
    public void test_2_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"_links\": [ " + 
                    " { " + 
                    " \"href\": \"_EM_348_XYZ_\", " + 
                    " \"hreflang\": \"uwJcTp8ajSR\", " + 
                    " \"name\": \"_EM_350_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"phone\": \"_postfix\" " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/contacts")
                .then()
                .statusCode(500) // market/rest/exception/RestErrorResponse_50_getFieldErrors
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("JSON parse error: Expected relation name; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Expected relation name\n at [Source: (ByteArrayInputStream); line: 1, column: 13] (through reference chain: market.dto.ContactsDTO[\"_links\"])"))
                .body("'description'", containsString("uri=/customer/contacts"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_3_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test @Timeout(60)
    public void test_3_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/contacts")
                .then()
                .statusCode(500) // market/dto/assembler/ContactsDtoAssembler_12_toModel
                .assertThat()
                .contentType("application/json")
                .body("'message'", nullValue())
                .body("'description'", containsString("uri=/customer/contacts"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_4_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test @Timeout(60)
    public void test_4_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer?EMextraParam123=_EM_247_XYZ_")
                .then()
                .statusCode(500) // market/dto/assembler/UserAccountDtoAssembler_16_toModel
                .assertThat()
                .contentType("application/json")
                .body("'message'", nullValue())
                .body("'description'", containsString("uri=/customer"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }


}
