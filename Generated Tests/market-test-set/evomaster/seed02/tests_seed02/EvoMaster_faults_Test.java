import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-02T17:22:48.660-03:00[America/Araguaina]
 * <br>
 * The generated test suite contains 7 tests
 * <br>
 * Covered targets: 237
 * <br>
 * Used time: 1h 0m 10s
 * <br>
 * Needed budget for current results: 93%
 * <br>
 * This file contains test cases that are likely to indicate faults.
 */
public class EvoMaster_faults_Test {

    
    private static final SutHandler controller = new em.embedded.market.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("USER_ROLE","CUSTOMER_ORDER","CART","CONTACTS","PRODUCT","DISTILLERY","CART_ITEM"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * [test_0_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test @Timeout(60)
    public void test_0_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"_links\": [ " + 
                    " { " + 
                    " \"deprecation\": \"_EM_204_XYZ_\", " + 
                    " \"media\": \"_EM_207_XYZ_\", " + 
                    " \"name\": \"_EM_208_XYZ_\", " + 
                    " \"rel\": { " + 
                    " \"_EM_210_XYZ_\": \"_EM_211_XYZ_\", " + 
                    " \"j\": \"_EM_212_XYZ_\" " + 
                    " }, " + 
                    " \"title\": \"_EM_213_XYZ_\", " + 
                    " \"type\": \"_EM_214_XYZ_\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .post(baseUrlOfSut + "/register")
                .then()
                .statusCode(500) // market/rest/exception/RestErrorResponse_50_getFieldErrors
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("JSON parse error: Expected relation name; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Expected relation name\n at [Source: (ByteArrayInputStream); line: 1, column: 13] (through reference chain: market.dto.UserDTO[\"_links\"])"))
                .body("'description'", containsString("uri=/register"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_1_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test @Timeout(60)
    public void test_1_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CART", 779L)
                .d("TOTAL_ITEMS", "134218050")
                .d("PRODUCTS_COST", "NULL")
                .d("DELIVERY_INCLUDED", "NULL")
            .and().insertInto("CART", 780L)
                .d("TOTAL_ITEMS", "NULL")
                .d("PRODUCTS_COST", "196")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("CART", 781L)
                .d("TOTAL_ITEMS", "138")
                .d("PRODUCTS_COST", "NULL")
                .d("DELIVERY_INCLUDED", "true")
            .and().insertInto("CART", 782L)
                .d("TOTAL_ITEMS", "104")
                .d("PRODUCTS_COST", "536")
                .d("DELIVERY_INCLUDED", "true")
            .and().insertInto("CONTACTS", 783L)
                .d("PHONE", "\"Sp8DGP76IbiK5GA9\"")
                .d("ADDRESS", "\"MJSdvp\"")
                .d("CITY_REGION", "\"kJgshwNCQzG5mBPN\"")
            .and().insertInto("CONTACTS", 784L)
                .d("PHONE", "NULL")
                .d("ADDRESS", "NULL")
                .d("CITY_REGION", "\"hOU\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"_links\": [ " + 
                    " { " + 
                    " \"deprecation\": \"_EM_935_XYZ_\", " + 
                    " \"hreflang\": \"_EM_937_XYZ_\", " + 
                    " \"name\": \"_EM_939_XYZ_\", " + 
                    " \"type\": \"_EM_946_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"deprecation\": \"_EM_947_XYZ_\", " + 
                    " \"hreflang\": \"IwSfLnEV\", " + 
                    " \"name\": \"Jtkis6MtTBVsmo\", " + 
                    " \"profile\": \"_EM_950_XYZ_\", " + 
                    " \"rel\": { " + 
                    " \"_EM_951_XYZ_\": \"_EM_952_XYZ_\", " + 
                    " \"_EM_953_XYZ_\": \"_EM_954_XYZ_\", " + 
                    " \"_EM_955_XYZ_\": \"_EM_956_XYZ_\", " + 
                    " \"_EM_957_XYZ_\": \"_EM_958_XYZ_\" " + 
                    " } " + 
                    " }, " + 
                    " { " + 
                    " \"deprecation\": \"_EM_961_XYZ_\", " + 
                    " \"hreflang\": \"_EM_963_XYZ_\", " + 
                    " \"media\": \"_EM_964_XYZ_\", " + 
                    " \"type\": \"_EM_971_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"href\": \"_EM_973_XYZ_\", " + 
                    " \"hreflang\": \"_EM_974_XYZ_\", " + 
                    " \"media\": \"_EM_975_XYZ_\", " + 
                    " \"rel\": { " + 
                    " \"3\": \"_EM_977_XYZ_\", " + 
                    " \"_EM_978_XYZ_\": \"_EM_979_XYZ_\", " + 
                    " \"_EM_980_XYZ_\": \"_EM_981_XYZ_\", " + 
                    " \"_EM_982_XYZ_\": \"_EM_983_XYZ_\", " + 
                    " \"_EM_984_XYZ_\": \"UM0an15\" " + 
                    " } " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/cart")
                .then()
                .statusCode(500) // market/rest/exception/RestErrorResponse_50_getFieldErrors
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("JSON parse error: Expected relation name; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Expected relation name\n at [Source: (ByteArrayInputStream); line: 1, column: 13] (through reference chain: market.dto.CartItemDTO[\"_links\"])"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_2_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test @Timeout(60)
    public void test_2_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/contacts?name=_EM_189_XYZ_")
                .then()
                .statusCode(500) // market/dto/assembler/ContactsDtoAssembler_12_toModel
                .assertThat()
                .contentType("application/json")
                .body("'message'", nullValue())
                .body("'description'", containsString("uri=/customer/contacts"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_3_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test @Timeout(60)
    public void test_3_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "_EM_462_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"_links\": [], " + 
                    " \"phone\": \"\" " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/contacts?" + 
                    "name=_EM_459_XYZ_&" + 
                    "EMextraParam123=_EM_461_XYZ_")
                .then()
                .statusCode(500) // market/rest/exception/RestErrorResponse_50_getFieldErrors
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("JSON parse error: Expected relation name; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Expected relation name\n at [Source: (ByteArrayInputStream); line: 1, column: 13] (through reference chain: market.dto.ContactsDTO[\"_links\"])"))
                .body("'description'", containsString("uri=/customer/contacts"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_4_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test @Timeout(60)
    public void test_4_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USER_ROLE", 613L)
                .d("USER_ID", "NULL")
                .d("ROLE_ID", "-15760")
            .and().insertInto("CUSTOMER_ORDER", 614L)
                .d("ID", "0")
                .d("USER_ACCOUNT_ID", "NULL")
                .d("DATE_CREATED", "\"1927-10-01\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "-2096223")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "-418670616")
            .and().insertInto("CUSTOMER_ORDER", 615L)
                .d("ID", "-1048075")
                .d("USER_ACCOUNT_ID", "NULL")
                .d("DATE_CREATED", "\"1945-01-02\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "-3154")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "350")
            .and().insertInto("CART", 616L)
                .d("TOTAL_ITEMS", "956")
                .d("PRODUCTS_COST", "569")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("CART", 617L)
                .d("TOTAL_ITEMS", "-32128")
                .d("PRODUCTS_COST", "NULL")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("CART", 618L)
                .d("TOTAL_ITEMS", "253")
                .d("PRODUCTS_COST", "0")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("CART", 619L)
                .d("TOTAL_ITEMS", "278")
                .d("PRODUCTS_COST", "462")
                .d("DELIVERY_INCLUDED", "true")
            .and().insertInto("CART", 620L)
                .d("TOTAL_ITEMS", "-65516")
                .d("PRODUCTS_COST", "-785690")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("CONTACTS", 621L)
                .d("PHONE", "\"_EM_11027_XYZ_\"")
                .d("ADDRESS", "\"5V78IU19xBXIZXQ\"")
                .d("CITY_REGION", "\"_EM_5380_XYZ_\"")
            .and().insertInto("CONTACTS", 622L)
                .d("PHONE", "\"_EM_5381_XYZ_\"")
                .d("ADDRESS", "\"_EM_5382_XYZ_\"")
                .d("CITY_REGION", "\"_EM_5383_XYZ_\"")
            .and().insertInto("CONTACTS", 623L)
                .d("PHONE", "\"_EM_11028_XYZ_\"")
                .d("ADDRESS", "\"NcZ0OTtJOK7a1\"")
                .d("CITY_REGION", "\"Vl_x\"")
            .and().insertInto("CONTACTS", 624L)
                .d("PHONE", "\"24ovklg:\"")
                .d("ADDRESS", "\"\"")
                .d("CITY_REGION", "\"UlEVuU8S\"")
            .and().insertInto("PRODUCT", 625L)
                .d("NAME", "\"JwkithgO\"")
                .d("DISTILLERY_ID", "2097940")
                .d("AGE", "-55")
                .d("ALCOHOL", "-75.63692991585529")
                .d("VOLUME", "305")
                .d("PRICE", "0.0")
                .d("DESCRIPTION", "\"DZ9Y55hHqPEm\"")
                .d("AVAILABLE", "true")
            .and().insertInto("PRODUCT", 626L)
                .d("NAME", "\"_EM_11029_XYZ_\"")
                .d("DISTILLERY_ID", "4194559")
                .d("AGE", "-32768")
                .d("ALCOHOL", "-1.6195125815318314E7")
                .d("VOLUME", "1381")
                .d("PRICE", "-3990844.711938358")
                .d("DESCRIPTION", "\"eAD\"")
                .d("AVAILABLE", "false")
            .and().insertInto("PRODUCT", 627L)
                .d("NAME", "\"_EM_5384_XYZ_\"")
                .d("DISTILLERY_ID", "0")
                .d("AGE", "-15384")
                .d("ALCOHOL", "2.221597567351725")
                .d("VOLUME", "408")
                .d("PRICE", "0.18000745271767904")
                .d("DESCRIPTION", "\"dnWAlWqBvmVsHT\"")
                .d("AVAILABLE", "false")
            .and().insertInto("PRODUCT", 628L)
                .d("NAME", "\"S1ZaqFkvC_qsxBJ6\"")
                .d("DISTILLERY_ID", "-1906430868")
                .d("AGE", "-13886")
                .d("ALCOHOL", "0.857498161693611")
                .d("VOLUME", "2098035")
                .d("PRICE", "6825141.862047837")
                .d("DESCRIPTION", "\"_EM_5385_XYZ_\"")
                .d("AVAILABLE", "true")
            .and().insertInto("PRODUCT", 629L)
                .d("NAME", "\"_EM_2134_XYZ_\"")
                .d("DISTILLERY_ID", "347")
                .d("AGE", "84")
                .d("ALCOHOL", "91792.4993805752")
                .d("VOLUME", "1000")
                .d("PRICE", "1.4349748411633385")
                .d("DESCRIPTION", "\"_EM_2135_XYZ_\"")
                .d("AVAILABLE", "false")
            .and().insertInto("DISTILLERY", 1765L)
                .d("TITLE", "\"MUi6H\"")
                .d("REGION_ID", "0")
                .d("DESCRIPTION", "\"\"")
            .and().insertInto("CART_ITEM", 3326L)
                .d("CART_ID", "834")
                .d("PRODUCT_ID", "-1083737693")
                .d("QUANTITY", "274")
            .and().insertInto("CART_ITEM", 3327L)
                .d("CART_ID", "280")
                .d("PRODUCT_ID", "758")
                .d("QUANTITY", "743")
            .and().insertInto("CART_ITEM", 3328L)
                .d("CART_ID", "723")
                .d("PRODUCT_ID", "NULL")
                .d("QUANTITY", "505")
            .and().insertInto("CART_ITEM", 3329L)
                .d("CART_ID", "NULL")
                .d("PRODUCT_ID", "64")
                .d("QUANTITY", "793")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/products")
                .then()
                .statusCode(500) // market/service/impl/ProductServiceImpl_35_findAll
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Unable to find market.domain.Distillery with id 2097940; nested exception is javax.persistence.EntityNotFoundException: Unable to find market.domain.Distillery with id 2097940"))
                .body("'description'", containsString("uri=/products"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_5_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test @Timeout(60)
    public void test_5_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "_EM_198_XYZ_")
                .get(baseUrlOfSut + "/customer")
                .then()
                .statusCode(500) // market/dto/assembler/UserAccountDtoAssembler_16_toModel
                .assertThat()
                .contentType("application/json")
                .body("'message'", nullValue())
                .body("'description'", containsString("uri=/customer"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_6_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test @Timeout(60)
    public void test_6_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USER_ROLE", 613L)
                .d("USER_ID", "NULL")
                .d("ROLE_ID", "-15760")
            .and().insertInto("CUSTOMER_ORDER", 614L)
                .d("ID", "0")
                .d("USER_ACCOUNT_ID", "NULL")
                .d("DATE_CREATED", "\"1927-10-01\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "-2096223")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "-418670616")
            .and().insertInto("CUSTOMER_ORDER", 615L)
                .d("ID", "-1048075")
                .d("USER_ACCOUNT_ID", "NULL")
                .d("DATE_CREATED", "\"1945-01-02\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "-3154")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "350")
            .and().insertInto("CART", 616L)
                .d("TOTAL_ITEMS", "956")
                .d("PRODUCTS_COST", "569")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("CART", 617L)
                .d("TOTAL_ITEMS", "-32128")
                .d("PRODUCTS_COST", "NULL")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("CART", 618L)
                .d("TOTAL_ITEMS", "253")
                .d("PRODUCTS_COST", "0")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("CART", 619L)
                .d("TOTAL_ITEMS", "278")
                .d("PRODUCTS_COST", "462")
                .d("DELIVERY_INCLUDED", "true")
            .and().insertInto("CART", 620L)
                .d("TOTAL_ITEMS", "-65516")
                .d("PRODUCTS_COST", "-785690")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("CONTACTS", 621L)
                .d("PHONE", "\"_EM_11027_XYZ_\"")
                .d("ADDRESS", "\"5V78IU19xBXIZXQ\"")
                .d("CITY_REGION", "\"_EM_5380_XYZ_\"")
            .and().insertInto("CONTACTS", 622L)
                .d("PHONE", "\"_EM_5381_XYZ_\"")
                .d("ADDRESS", "\"_EM_5382_XYZ_\"")
                .d("CITY_REGION", "\"_EM_5383_XYZ_\"")
            .and().insertInto("CONTACTS", 623L)
                .d("PHONE", "\"_EM_11028_XYZ_\"")
                .d("ADDRESS", "\"NcZ0OTtJOK7a1\"")
                .d("CITY_REGION", "\"Vl_x\"")
            .and().insertInto("CONTACTS", 624L)
                .d("PHONE", "\"24ovklg:\"")
                .d("ADDRESS", "\"\"")
                .d("CITY_REGION", "\"UlEVuU8S\"")
            .and().insertInto("PRODUCT", 625L)
                .d("NAME", "\"JwkithgO\"")
                .d("DISTILLERY_ID", "2097940")
                .d("AGE", "-55")
                .d("ALCOHOL", "-75.63692991585529")
                .d("VOLUME", "305")
                .d("PRICE", "0.0")
                .d("DESCRIPTION", "\"DZ9Y55hHqPEm\"")
                .d("AVAILABLE", "true")
            .and().insertInto("PRODUCT", 626L)
                .d("NAME", "\"_EM_11029_XYZ_\"")
                .d("DISTILLERY_ID", "4194559")
                .d("AGE", "-32768")
                .d("ALCOHOL", "-1.6195125815318314E7")
                .d("VOLUME", "1381")
                .d("PRICE", "-3990844.711938358")
                .d("DESCRIPTION", "\"eAD\"")
                .d("AVAILABLE", "false")
            .and().insertInto("PRODUCT", 627L)
                .d("NAME", "\"_EM_5384_XYZ_\"")
                .d("DISTILLERY_ID", "0")
                .d("AGE", "-15384")
                .d("ALCOHOL", "2.221597567351725")
                .d("VOLUME", "408")
                .d("PRICE", "0.18000745271767904")
                .d("DESCRIPTION", "\"dnWAlWqBvmVsHT\"")
                .d("AVAILABLE", "false")
            .and().insertInto("PRODUCT", 628L)
                .d("NAME", "\"S1ZaqFkvC_qsxBJ6\"")
                .d("DISTILLERY_ID", "-1906430868")
                .d("AGE", "-13886")
                .d("ALCOHOL", "0.857498161693611")
                .d("VOLUME", "2098035")
                .d("PRICE", "6825141.862047837")
                .d("DESCRIPTION", "\"_EM_5385_XYZ_\"")
                .d("AVAILABLE", "true")
            .and().insertInto("PRODUCT", 629L)
                .d("NAME", "\"_EM_2134_XYZ_\"")
                .d("DISTILLERY_ID", "347")
                .d("AGE", "84")
                .d("ALCOHOL", "91792.4993805752")
                .d("VOLUME", "1000")
                .d("PRICE", "1.4349748411633385")
                .d("DESCRIPTION", "\"_EM_2135_XYZ_\"")
                .d("AVAILABLE", "false")
            .and().insertInto("DISTILLERY", 1765L)
                .d("TITLE", "\"MUi6H\"")
                .d("REGION_ID", "0")
                .d("DESCRIPTION", "\"\"")
            .and().insertInto("CART_ITEM", 3326L)
                .d("CART_ID", "834")
                .d("PRODUCT_ID", "-1083737693")
                .d("QUANTITY", "274")
            .and().insertInto("CART_ITEM", 3327L)
                .d("CART_ID", "280")
                .d("PRODUCT_ID", "758")
                .d("QUANTITY", "743")
            .and().insertInto("CART_ITEM", 3328L)
                .d("CART_ID", "723")
                .d("PRODUCT_ID", "NULL")
                .d("QUANTITY", "505")
            .and().insertInto("CART_ITEM", 3329L)
                .d("CART_ID", "NULL")
                .d("PRODUCT_ID", "64")
                .d("QUANTITY", "793")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/orders/0")
                .then()
                .statusCode(500) // market/dto/assembler/OrderDtoAssembler_17_toModel
                .assertThat()
                .contentType("application/json")
                .body("'message'", nullValue())
                .body("'description'", containsString("uri=/customer/orders/0"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }


}
