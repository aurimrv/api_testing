package market;
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-02T17:22:48.717-03:00[America/Araguaina]
 * <br>
 * The generated test suite contains 14 tests
 * <br>
 * Covered targets: 342
 * <br>
 * Used time: 1h 0m 10s
 * <br>
 * Needed budget for current results: 93%
 * <br>
 * This file contains test cases that represent failed calls, but not indicative of faults.
 */
public class seed02_EvoMaster_others_Test {

    
    private static final SutHandler controller = new em.embedded.market.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("USER_ROLE","CUSTOMER_ORDER","CART","CONTACTS","PRODUCT","DISTILLERY","CART_ITEM"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test @Timeout(60)
    public void test_0() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_18_XYZ_")
                .get(baseUrlOfSut + "/customer")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'message'", containsString(""))
                .body("'path'", containsString("/customer"));
        
    }
    
    
    @Test @Timeout(60)
    public void test_1() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_2_XYZ_")
                .get(baseUrlOfSut + "/customer/orders/324")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Acesso negado"))
                .body("'description'", containsString("uri=/customer/orders/324"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
    }
    
    
    @Test @Timeout(60)
    public void test_2() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/cart?name=_EM_3_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Acesso negado"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
    }
    
    
    @Test @Timeout(60)
    public void test_3() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_8_XYZ_")
                .delete(baseUrlOfSut + "/customer/cart?name=_EM_6_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Acesso negado"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
    }
    
    
    @Test @Timeout(60)
    public void test_4() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/contacts?EMextraParam123=_EM_10_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Acesso negado"))
                .body("'description'", containsString("uri=/customer/contacts"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
    }
    
    
    @Test @Timeout(60)
    public void test_5() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_13_XYZ_")
                .get(baseUrlOfSut + "/customer/orders")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Acesso negado"))
                .body("'description'", containsString("uri=/customer/orders"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
    }
    
    
    @Test @Timeout(60)
    public void test_6() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_59_XYZ_")
                .put(baseUrlOfSut + "/customer/cart/delivery?" + 
                    "included=true&" + 
                    "name=Qv2MIom31&" + 
                    "EMextraParam123=_EM_58_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Acesso negado"))
                .body("'description'", containsString("uri=/customer/cart/delivery"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
    }
    
    
    @Test @Timeout(60)
    public void test_7() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USER_ROLE", 613L)
                .d("USER_ID", "NULL")
                .d("ROLE_ID", "-15760")
            .and().insertInto("CUSTOMER_ORDER", 614L)
                .d("ID", "0")
                .d("USER_ACCOUNT_ID", "NULL")
                .d("DATE_CREATED", "\"1927-10-01\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "-2096223")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "-418670616")
            .and().insertInto("CUSTOMER_ORDER", 615L)
                .d("ID", "-1048075")
                .d("USER_ACCOUNT_ID", "NULL")
                .d("DATE_CREATED", "\"1945-01-02\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "-3154")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "350")
            .and().insertInto("CART", 616L)
                .d("TOTAL_ITEMS", "956")
                .d("PRODUCTS_COST", "569")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("CART", 617L)
                .d("TOTAL_ITEMS", "-32128")
                .d("PRODUCTS_COST", "NULL")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("CART", 618L)
                .d("TOTAL_ITEMS", "253")
                .d("PRODUCTS_COST", "0")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("CART", 619L)
                .d("TOTAL_ITEMS", "278")
                .d("PRODUCTS_COST", "462")
                .d("DELIVERY_INCLUDED", "true")
            .and().insertInto("CART", 620L)
                .d("TOTAL_ITEMS", "-65516")
                .d("PRODUCTS_COST", "-785690")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("CONTACTS", 621L)
                .d("PHONE", "\"_EM_11027_XYZ_\"")
                .d("ADDRESS", "\"5V78IU19xBXIZXQ\"")
                .d("CITY_REGION", "\"_EM_5380_XYZ_\"")
            .and().insertInto("CONTACTS", 622L)
                .d("PHONE", "\"_EM_5381_XYZ_\"")
                .d("ADDRESS", "\"_EM_5382_XYZ_\"")
                .d("CITY_REGION", "\"_EM_5383_XYZ_\"")
            .and().insertInto("CONTACTS", 623L)
                .d("PHONE", "\"_EM_11028_XYZ_\"")
                .d("ADDRESS", "\"NcZ0OTtJOK7a1\"")
                .d("CITY_REGION", "\"Vl_x\"")
            .and().insertInto("CONTACTS", 624L)
                .d("PHONE", "\"24ovklg:\"")
                .d("ADDRESS", "\"\"")
                .d("CITY_REGION", "\"UlEVuU8S\"")
            .and().insertInto("PRODUCT", 625L)
                .d("NAME", "\"JwkithgO\"")
                .d("DISTILLERY_ID", "2097940")
                .d("AGE", "-55")
                .d("ALCOHOL", "-75.63692991585529")
                .d("VOLUME", "305")
                .d("PRICE", "0.0")
                .d("DESCRIPTION", "\"DZ9Y55hHqPEm\"")
                .d("AVAILABLE", "true")
            .and().insertInto("PRODUCT", 626L)
                .d("NAME", "\"_EM_11029_XYZ_\"")
                .d("DISTILLERY_ID", "4194559")
                .d("AGE", "-32768")
                .d("ALCOHOL", "-1.6195125815318314E7")
                .d("VOLUME", "1381")
                .d("PRICE", "-3990844.711938358")
                .d("DESCRIPTION", "\"eAD\"")
                .d("AVAILABLE", "false")
            .and().insertInto("PRODUCT", 627L)
                .d("NAME", "\"_EM_5384_XYZ_\"")
                .d("DISTILLERY_ID", "0")
                .d("AGE", "-15384")
                .d("ALCOHOL", "2.221597567351725")
                .d("VOLUME", "408")
                .d("PRICE", "0.18000745271767904")
                .d("DESCRIPTION", "\"dnWAlWqBvmVsHT\"")
                .d("AVAILABLE", "false")
            .and().insertInto("PRODUCT", 628L)
                .d("NAME", "\"S1ZaqFkvC_qsxBJ6\"")
                .d("DISTILLERY_ID", "-1906430868")
                .d("AGE", "-13886")
                .d("ALCOHOL", "0.857498161693611")
                .d("VOLUME", "2098035")
                .d("PRICE", "6825141.862047837")
                .d("DESCRIPTION", "\"_EM_5385_XYZ_\"")
                .d("AVAILABLE", "true")
            .and().insertInto("PRODUCT", 629L)
                .d("NAME", "\"_EM_2134_XYZ_\"")
                .d("DISTILLERY_ID", "347")
                .d("AGE", "84")
                .d("ALCOHOL", "91792.4993805752")
                .d("VOLUME", "1000")
                .d("PRICE", "1.4349748411633385")
                .d("DESCRIPTION", "\"_EM_2135_XYZ_\"")
                .d("AVAILABLE", "false")
            .and().insertInto("DISTILLERY", 1765L)
                .d("TITLE", "\"MUi6H\"")
                .d("REGION_ID", "0")
                .d("DESCRIPTION", "\"\"")
            .and().insertInto("CART_ITEM", 3326L)
                .d("CART_ID", "834")
                .d("PRODUCT_ID", "-1083737693")
                .d("QUANTITY", "274")
            .and().insertInto("CART_ITEM", 3327L)
                .d("CART_ID", "280")
                .d("PRODUCT_ID", "758")
                .d("QUANTITY", "743")
            .and().insertInto("CART_ITEM", 3328L)
                .d("CART_ID", "723")
                .d("PRODUCT_ID", "NULL")
                .d("QUANTITY", "505")
            .and().insertInto("CART_ITEM", 3329L)
                .d("CART_ID", "NULL")
                .d("PRODUCT_ID", "64")
                .d("QUANTITY", "793")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/products/258")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Requested entity doesn't exist"))
                .body("'description'", containsString("uri=/products/258"))
                .body("'entityName'", containsString("ProductDTO"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("id"))
                .body("'fieldErrors'[0].'message'", containsString("No instance with this id"));
        
    }
    
    
    @Test @Timeout(60)
    public void test_8() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "_EM_356_XYZ_")
                .get(baseUrlOfSut + "/customer/orders/2283840960333710372?name=_EM_354_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Requested entity doesn't exist"))
                .body("'description'", containsString("uri=/customer/orders/2283840960333710372"))
                .body("'entityName'", containsString("OrderDTO"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("id"))
                .body("'fieldErrors'[0].'message'", containsString("No instance with this id"));
        
    }
    
    
    @Test @Timeout(60)
    public void test_9() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"productId\": 4191116218964206769, " + 
                    " \"quantity\": 643 " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/cart")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Requested entity doesn't exist"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", containsString("Product"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("id"))
                .body("'fieldErrors'[0].'message'", containsString("No instance with this id"));
        
    }
    
    
    @Test @Timeout(60)
    public void test_10() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"email\": \"_EM_55_XYZ_\", " + 
                    " \"password\": \"7Ep\", " + 
                    " \"phone\": \"_postfix\" " + 
                    " } ")
                .post(baseUrlOfSut + "/register?EMextraParam123=_EM_56_XYZ_")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/register"))
                .body("'entityName'", containsString("userDTO"))
                .body("'fieldErrors'.size()", equalTo(5))
                .body("'fieldErrors'[0].'field'", containsString("phone"))
                .body("'fieldErrors'[0].'message'", containsString("Shall consist of a + sign, a country code, a region code (1-4 digits), and a number (6-7 digits)"))
                .body("'fieldErrors'[1].'field'", containsString("name"))
                .body("'fieldErrors'[1].'message'", containsString("The value shall not be empty"))
                .body("'fieldErrors'[2].'field'", containsString("email"))
                .body("'fieldErrors'[2].'message'", containsString("The value shall be in the format of an email address"))
                ; // Skipping assertions on the remaining 2 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_11() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "_EM_458_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"quantity\": 663 " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/cart?" + 
                    "name=_EM_429_XYZ_&" + 
                    "EMextraParam123=_EM_457_XYZ_")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", containsString("cartItemDTO"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("productId"))
                .body("'fieldErrors'[0].'message'", containsString("Value shall be a positive number"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_12() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USER_ROLE", 613L)
                .d("USER_ID", "NULL")
                .d("ROLE_ID", "-15760")
            .and().insertInto("CUSTOMER_ORDER", 614L)
                .d("ID", "0")
                .d("USER_ACCOUNT_ID", "NULL")
                .d("DATE_CREATED", "\"1927-10-01\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "-2096223")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "-418670616")
            .and().insertInto("CUSTOMER_ORDER", 615L)
                .d("ID", "-1048075")
                .d("USER_ACCOUNT_ID", "NULL")
                .d("DATE_CREATED", "\"1945-01-02\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "-3154")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "350")
            .and().insertInto("CART", 616L)
                .d("TOTAL_ITEMS", "956")
                .d("PRODUCTS_COST", "569")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("CART", 617L)
                .d("TOTAL_ITEMS", "-32128")
                .d("PRODUCTS_COST", "NULL")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("CART", 618L)
                .d("TOTAL_ITEMS", "253")
                .d("PRODUCTS_COST", "0")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("CART", 619L)
                .d("TOTAL_ITEMS", "278")
                .d("PRODUCTS_COST", "462")
                .d("DELIVERY_INCLUDED", "true")
            .and().insertInto("CART", 620L)
                .d("TOTAL_ITEMS", "-65516")
                .d("PRODUCTS_COST", "-785690")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("CONTACTS", 621L)
                .d("PHONE", "\"_EM_11027_XYZ_\"")
                .d("ADDRESS", "\"5V78IU19xBXIZXQ\"")
                .d("CITY_REGION", "\"_EM_5380_XYZ_\"")
            .and().insertInto("CONTACTS", 622L)
                .d("PHONE", "\"_EM_5381_XYZ_\"")
                .d("ADDRESS", "\"_EM_5382_XYZ_\"")
                .d("CITY_REGION", "\"_EM_5383_XYZ_\"")
            .and().insertInto("CONTACTS", 623L)
                .d("PHONE", "\"_EM_11028_XYZ_\"")
                .d("ADDRESS", "\"NcZ0OTtJOK7a1\"")
                .d("CITY_REGION", "\"Vl_x\"")
            .and().insertInto("CONTACTS", 624L)
                .d("PHONE", "\"24ovklg:\"")
                .d("ADDRESS", "\"\"")
                .d("CITY_REGION", "\"UlEVuU8S\"")
            .and().insertInto("PRODUCT", 625L)
                .d("NAME", "\"JwkithgO\"")
                .d("DISTILLERY_ID", "2097940")
                .d("AGE", "-55")
                .d("ALCOHOL", "-75.63692991585529")
                .d("VOLUME", "305")
                .d("PRICE", "0.0")
                .d("DESCRIPTION", "\"DZ9Y55hHqPEm\"")
                .d("AVAILABLE", "true")
            .and().insertInto("PRODUCT", 626L)
                .d("NAME", "\"_EM_11029_XYZ_\"")
                .d("DISTILLERY_ID", "4194559")
                .d("AGE", "-32768")
                .d("ALCOHOL", "-1.6195125815318314E7")
                .d("VOLUME", "1381")
                .d("PRICE", "-3990844.711938358")
                .d("DESCRIPTION", "\"eAD\"")
                .d("AVAILABLE", "false")
            .and().insertInto("PRODUCT", 627L)
                .d("NAME", "\"_EM_5384_XYZ_\"")
                .d("DISTILLERY_ID", "0")
                .d("AGE", "-15384")
                .d("ALCOHOL", "2.221597567351725")
                .d("VOLUME", "408")
                .d("PRICE", "0.18000745271767904")
                .d("DESCRIPTION", "\"dnWAlWqBvmVsHT\"")
                .d("AVAILABLE", "false")
            .and().insertInto("PRODUCT", 628L)
                .d("NAME", "\"S1ZaqFkvC_qsxBJ6\"")
                .d("DISTILLERY_ID", "-1906430868")
                .d("AGE", "-13886")
                .d("ALCOHOL", "0.857498161693611")
                .d("VOLUME", "2098035")
                .d("PRICE", "6825141.862047837")
                .d("DESCRIPTION", "\"_EM_5385_XYZ_\"")
                .d("AVAILABLE", "true")
            .and().insertInto("PRODUCT", 629L)
                .d("NAME", "\"_EM_2134_XYZ_\"")
                .d("DISTILLERY_ID", "347")
                .d("AGE", "84")
                .d("ALCOHOL", "91792.4993805752")
                .d("VOLUME", "1000")
                .d("PRICE", "1.4349748411633385")
                .d("DESCRIPTION", "\"_EM_2135_XYZ_\"")
                .d("AVAILABLE", "false")
            .and().insertInto("DISTILLERY", 1765L)
                .d("TITLE", "\"MUi6H\"")
                .d("REGION_ID", "0")
                .d("DESCRIPTION", "\"\"")
            .and().insertInto("CART_ITEM", 3326L)
                .d("CART_ID", "834")
                .d("PRODUCT_ID", "-1083737693")
                .d("QUANTITY", "274")
            .and().insertInto("CART_ITEM", 3327L)
                .d("CART_ID", "280")
                .d("PRODUCT_ID", "758")
                .d("QUANTITY", "743")
            .and().insertInto("CART_ITEM", 3328L)
                .d("CART_ID", "723")
                .d("PRODUCT_ID", "NULL")
                .d("QUANTITY", "505")
            .and().insertInto("CART_ITEM", 3329L)
                .d("CART_ID", "NULL")
                .d("PRODUCT_ID", "64")
                .d("QUANTITY", "793")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"ccNumber\": \"_postfix\" " + 
                    " } ")
                .post(baseUrlOfSut + "/customer/cart/pay?name=a_G0OHWb0SV")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/customer/cart/pay"))
                .body("'entityName'", containsString("creditCardDTO"))
                .body("'fieldErrors'.size()", equalTo(2))
                .body("'fieldErrors'[0].'field'", containsString("ccNumber"))
                .body("'fieldErrors'[0].'message'", containsString("Card number shall consist of 13-16 digits"))
                .body("'fieldErrors'[1].'field'", containsString("ccNumber"))
                .body("'fieldErrors'[1].'message'", containsString("Not a valid credit card number"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_13() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USER_ROLE", 687L)
                .d("USER_ID", "743")
                .d("ROLE_ID", "-3627")
            .and().insertInto("CUSTOMER_ORDER", 688L)
                .d("ID", "4194505")
                .d("USER_ACCOUNT_ID", "607")
                .d("DATE_CREATED", "\"1962-09-18\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "45")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "532")
            .and().insertInto("CUSTOMER_ORDER", 689L)
                .d("ID", "1478787874")
                .d("USER_ACCOUNT_ID", "1994")
                .d("DATE_CREATED", "\"1957-10-04\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "0")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "594")
            .and().insertInto("CUSTOMER_ORDER", 690L)
                .d("ID", "-1024")
                .d("USER_ACCOUNT_ID", "-3258")
                .d("DATE_CREATED", "NULL")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "343")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "-261859")
            .and().insertInto("CUSTOMER_ORDER", 691L)
                .d("ID", "206")
                .d("USER_ACCOUNT_ID", "NULL")
                .d("DATE_CREATED", "\"2000-06-01\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "197")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "860")
            .and().insertInto("CUSTOMER_ORDER", 692L)
                .d("ID", "0")
                .d("USER_ACCOUNT_ID", "-261284")
                .d("DATE_CREATED", "\"2050-12-31\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "406")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "0")
            .and().insertInto("CART", 693L)
                .d("TOTAL_ITEMS", "798")
                .d("PRODUCTS_COST", "966")
                .d("DELIVERY_INCLUDED", "true")
            .and().insertInto("CART", 694L)
                .d("TOTAL_ITEMS", "0")
                .d("PRODUCTS_COST", "0")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("CONTACTS", 695L)
                .d("PHONE", "\"dJ3XMJnX\"")
                .d("ADDRESS", "\"5G\"")
                .d("CITY_REGION", "\"_EM_7471_XYZ_\"")
            .and().insertInto("PRODUCT", 696L)
                .d("NAME", "\"MVo5Zu7439vFBo\"")
                .d("DISTILLERY_ID", "-1047860")
                .d("AGE", "NULL")
                .d("ALCOHOL", "0.0")
                .d("VOLUME", "0")
                .d("PRICE", "0.0")
                .d("DESCRIPTION", "\"bwLaV4FZN1M\"")
                .d("AVAILABLE", "true")
            .and().insertInto("DISTILLERY", 4338L)
                .d("TITLE", "\"i2BaeRcS0UzbDv40\"")
                .d("REGION_ID", "NULL")
                .d("DESCRIPTION", "NULL")
            .and().insertInto("DISTILLERY", 4339L)
                .d("TITLE", "\"tYSrb136QtsU7\"")
                .d("REGION_ID", "598")
                .d("DESCRIPTION", "\"_EM_13559_XYZ_\"")
            .and().insertInto("DISTILLERY", 4340L)
                .d("TITLE", "NULL")
                .d("REGION_ID", "261")
                .d("DESCRIPTION", "\"_EM_13563_XYZ_\"")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"^FNd8\", " + 
                    " \"phone\": \"_postfix\" " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/contacts")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/customer/contacts"))
                .body("'entityName'", containsString("contactsDTO"))
                .body("'fieldErrors'.size()", equalTo(2))
                .body("'fieldErrors'[0].'field'", containsString("phone"))
                .body("'fieldErrors'[0].'message'", containsString("Shall consist of a + sign, a country code, a region code (1-4 digits), and a number (6-7 digits)"))
                .body("'fieldErrors'[1].'field'", containsString("address"))
                .body("'fieldErrors'[1].'message'", containsString("Pattern.contactsDTO.address"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }


}
