package em.embedded.market;
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-03T21:52:53.896-03:00[America/Araguaina]
 * <br>
 * The generated test suite contains 17 tests
 * <br>
 * Covered targets: 325
 * <br>
 * Used time: 1h 0m 9s
 * <br>
 * Needed budget for current results: 83%
 * <br>
 * This file contains test cases that represent failed calls, but not indicative of faults.
 */
public class seed10_EvoMaster_others_Test {

    
    private static final SutHandler controller = new em.embedded.market.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("CONTACTS","USER_ROLE","CUSTOMER_ORDER","PRODUCT","CART","DISTILLERY","ORDERED_PRODUCT","BILL","USER_ACCOUNT"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test @Timeout(60)
    public void test_0() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_17_XYZ_")
                .get(baseUrlOfSut + "/customer?name=_EM_15_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'message'", containsString(""))
                .body("'path'", containsString("/customer"));
        
    }
    
    
    @Test @Timeout(60)
    public void test_1() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/orders/270?" + 
                    "name=_EM_0_XYZ_&" + 
                    "EMextraParam123=_EM_1_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Acesso negado"))
                .body("'description'", containsString("uri=/customer/orders/270"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
    }
    
    
    @Test @Timeout(60)
    public void test_2() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_4_XYZ_")
                .get(baseUrlOfSut + "/customer/cart?EMextraParam123=_EM_3_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Acesso negado"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
    }
    
    
    @Test @Timeout(60)
    public void test_3() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_7_XYZ_")
                .delete(baseUrlOfSut + "/customer/cart")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Acesso negado"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
    }
    
    
    @Test @Timeout(60)
    public void test_4() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_10_XYZ_")
                .get(baseUrlOfSut + "/customer/contacts?EMextraParam123=_EM_9_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Acesso negado"))
                .body("'description'", containsString("uri=/customer/contacts"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
    }
    
    
    @Test @Timeout(60)
    public void test_5() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/orders")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Acesso negado"))
                .body("'description'", containsString("uri=/customer/orders"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
    }
    
    
    @Test @Timeout(60)
    public void test_6() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/customer/cart/delivery?" + 
                    "included=false&" + 
                    "name=_EM_26_XYZ_&" + 
                    "EMextraParam123=_EM_27_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Acesso negado"))
                .body("'description'", containsString("uri=/customer/cart/delivery"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
    }
    
    
    @Test @Timeout(60)
    public void test_7() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_56_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"productId\": 131, " + 
                    " \"quantity\": 835 " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/cart?EMextraParam123=_EM_55_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Acesso negado"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
    }
    
    
    @Test @Timeout(60)
    public void test_8() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/products/199")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Requested entity doesn't exist"))
                .body("'description'", containsString("uri=/products/199"))
                .body("'entityName'", containsString("ProductDTO"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("id"))
                .body("'fieldErrors'[0].'message'", containsString("No instance with this id"));
        
    }
    
    
    @Test @Timeout(60)
    public void test_9() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "_EM_217_XYZ_")
                .get(baseUrlOfSut + "/customer/orders/828?EMextraParam123=_EM_216_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Requested entity doesn't exist"))
                .body("'description'", containsString("uri=/customer/orders/828"))
                .body("'entityName'", containsString("OrderDTO"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("id"))
                .body("'fieldErrors'[0].'message'", containsString("No instance with this id"));
        
    }
    
    
    @Test @Timeout(60)
    public void test_10() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"productId\": 978, " + 
                    " \"quantity\": 444 " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/cart?EMextraParam123=_EM_257_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Requested entity doesn't exist"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", containsString("Product"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("id"))
                .body("'fieldErrors'[0].'message'", containsString("No instance with this id"));
        
    }
    
    
    @Test @Timeout(60)
    public void test_11() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "_EM_181_XYZ_")
                .contentType("application/json")
                .body(" {} ")
                .put(baseUrlOfSut + "/customer/cart?name=_EM_179_XYZ_")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", containsString("cartItemDTO"))
                .body("'fieldErrors'.size()", equalTo(2))
                .body("'fieldErrors'[0].'field'", containsString("productId"))
                .body("'fieldErrors'[0].'message'", containsString("Value shall be a positive number"))
                .body("'fieldErrors'[1].'field'", containsString("quantity"))
                .body("'fieldErrors'[1].'message'", containsString("Value shall be a positive number"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_12() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "_EM_184_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"_EM_182_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/contacts")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/customer/contacts"))
                .body("'entityName'", containsString("contactsDTO"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("phone"))
                .body("'fieldErrors'[0].'message'", containsString("The value shall not be empty"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_13() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTACTS", 350L)
                .d("PHONE", "\"_EM_7335_XYZ_\"")
                .d("ADDRESS", "\"D0VKZ0pycD\"")
                .d("CITY_REGION", "\"FMn\"")
            .and().insertInto("CUSTOMER_ORDER", 567L)
                .d("ID", "-765")
                .d("USER_ACCOUNT_ID", "520")
                .d("DATE_CREATED", "\"2038-05-10\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "8")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "0")
            .and().insertInto("CUSTOMER_ORDER", 568L)
                .d("ID", "64")
                .d("USER_ACCOUNT_ID", "-10065")
                .d("DATE_CREATED", "\"2058-10-30\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "227")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "-445116676")
            .and().insertInto("CUSTOMER_ORDER", 569L)
                .d("ID", "0")
                .d("USER_ACCOUNT_ID", "80")
                .d("DATE_CREATED", "\"2000-08-16\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "139")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "262144")
            .and().insertInto("CART", 570L)
                .d("TOTAL_ITEMS", "922")
                .d("PRODUCTS_COST", "0")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("CART", 571L)
                .d("TOTAL_ITEMS", "936")
                .d("PRODUCTS_COST", "342")
                .d("DELIVERY_INCLUDED", "true")
            .and().insertInto("CART", 572L)
                .d("TOTAL_ITEMS", "0")
                .d("PRODUCTS_COST", "33580")
                .d("DELIVERY_INCLUDED", "true")
            .and().insertInto("CART", 573L)
                .d("TOTAL_ITEMS", "0")
                .d("PRODUCTS_COST", "59")
                .d("DELIVERY_INCLUDED", "true")
            .and().insertInto("PRODUCT", 1707L)
                .d("NAME", "\"_EM_7336_XYZ_\"")
                .d("DISTILLERY_ID", "988")
                .d("AGE", "772")
                .d("ALCOHOL", "0.0")
                .d("VOLUME", "-4160")
                .d("PRICE", "1.8182305978483053")
                .d("DESCRIPTION", "\"FbACv\"")
                .d("AVAILABLE", "false")
            .and().insertInto("PRODUCT", 1708L)
                .d("NAME", "\"_EM_7109_XYZ_\"")
                .d("DISTILLERY_ID", "NULL")
                .d("AGE", "-15972")
                .d("ALCOHOL", "0.25501119308937215")
                .d("VOLUME", "1200")
                .d("PRICE", "0.1542133800688582")
                .d("DESCRIPTION", "\"BGhLbmjc6\"")
                .d("AVAILABLE", "false")
            .and().insertInto("PRODUCT", 1709L)
                .d("NAME", "\"_EM_7333_XYZ_\"")
                .d("DISTILLERY_ID", "775")
                .d("AGE", "140")
                .d("ALCOHOL", "0.9599666472778339")
                .d("VOLUME", "2097152")
                .d("PRICE", "-0.05075164315583269")
                .d("DESCRIPTION", "\"_EM_7337_XYZ_\"")
                .d("AVAILABLE", "true")
            .and().insertInto("PRODUCT", 1710L)
                .d("NAME", "\"qM9AFhQOrc02k3q\"")
                .d("DISTILLERY_ID", "-303")
                .d("AGE", "34")
                .d("ALCOHOL", "0.019206030313697164")
                .d("VOLUME", "0")
                .d("PRICE", "0.9801736952587613")
                .d("DESCRIPTION", "\"_EM_7338_XYZ_\"")
                .d("AVAILABLE", "false")
            .and().insertInto("PRODUCT", 1711L)
                .d("NAME", "\"2\"")
                .d("DISTILLERY_ID", "0")
                .d("AGE", "-6542")
                .d("ALCOHOL", "0.0")
                .d("VOLUME", "-4194179")
                .d("PRICE", "0.6573417965418761")
                .d("DESCRIPTION", "\"1916-10-03\"")
                .d("AVAILABLE", "true")
            .and().insertInto("USER_ACCOUNT", 2117L)
                .d("EMAIL", "\"E1XTOBPi\"")
                .d("PASSWORD", "\"wo20\"")
                .d("NAME", "\"_EM_7339_XYZ_\"")
                .d("ACTIVE", "true")
            .and().insertInto("USER_ACCOUNT", 2118L)
                .d("EMAIL", "NULL")
                .d("PASSWORD", "\"7UMLCCZ\"")
                .d("NAME", "\"zzlq_sMlZkDHs\"")
                .d("ACTIVE", "false")
            .and().insertInto("USER_ACCOUNT", 2119L)
                .d("EMAIL", "\"fjmAF72LjlQWu\"")
                .d("PASSWORD", "\"ePYxcyA4pel39\"")
                .d("NAME", "\"y_tv7M7\"")
                .d("ACTIVE", "true")
            .and().insertInto("USER_ACCOUNT", 2120L)
                .d("EMAIL", "\"rk0\"")
                .d("PASSWORD", "\"R47pjNWekDZ6T\"")
                .d("NAME", "\"Oetexp\"")
                .d("ACTIVE", "true")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"ccNumber\": \"prefix__postfix\" " + 
                    " } ")
                .post(baseUrlOfSut + "/customer/cart/pay?name=_EM_7332_XYZ_")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/customer/cart/pay"))
                .body("'entityName'", containsString("creditCardDTO"))
                .body("'fieldErrors'.size()", equalTo(2))
                .body("'fieldErrors'[0].'field'", containsString("ccNumber"))
                .body("'fieldErrors'[0].'message'", containsString("Not a valid credit card number"))
                .body("'fieldErrors'[1].'field'", containsString("ccNumber"))
                .body("'fieldErrors'[1].'message'", containsString("Card number shall consist of 13-16 digits"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_14() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTACTS", 972L)
                .d("PHONE", "\"_EM_10087_XYZ_\"")
                .d("ADDRESS", "\"z1ayYePGfVmv\"")
                .d("CITY_REGION", "\"eJ_kC\"")
            .and().insertInto("CONTACTS", 973L)
                .d("PHONE", "\"ardbeg\"")
                .d("ADDRESS", "\"Si\"")
                .d("CITY_REGION", "\"Xxg8jE\"")
            .and().insertInto("USER_ROLE", 974L)
                .d("USER_ID", "965")
                .d("ROLE_ID", "590")
            .and().insertInto("USER_ROLE", 975L)
                .d("USER_ID", "-65275")
                .d("ROLE_ID", "0")
            .and().insertInto("USER_ROLE", 976L)
                .d("USER_ID", "NULL")
                .d("ROLE_ID", "724")
            .and().insertInto("USER_ROLE", 977L)
                .d("USER_ID", "0")
                .d("ROLE_ID", "-8")
            .and().insertInto("USER_ROLE", 978L)
                .d("USER_ID", "-2128968")
                .d("ROLE_ID", "314")
            .and().insertInto("CUSTOMER_ORDER", 979L)
                .d("ID", "309")
                .d("USER_ACCOUNT_ID", "-1915113906")
                .d("DATE_CREATED", "\"2000-06-30\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "0")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "659")
            .and().insertInto("CUSTOMER_ORDER", 980L)
                .d("ID", "0")
                .d("USER_ACCOUNT_ID", "1")
                .d("DATE_CREATED", "\"2047-03-17\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "8696")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "1054")
            .and().insertInto("CUSTOMER_ORDER", 981L)
                .d("ID", "65586")
                .d("USER_ACCOUNT_ID", "458")
                .d("DATE_CREATED", "\"2100-09-01\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "74")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "0")
            .and().insertInto("CUSTOMER_ORDER", 982L)
                .d("ID", "791")
                .d("USER_ACCOUNT_ID", "525046")
                .d("DATE_CREATED", "\"2000-01-30\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "0")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "-524284")
            .and().insertInto("PRODUCT", 983L)
                .d("NAME", "\"_EM_10013_XYZ_\"")
                .d("DISTILLERY_ID", "NULL")
                .d("AGE", "-15384")
                .d("ALCOHOL", "1.6794182102503832")
                .d("VOLUME", "9")
                .d("PRICE", "0.0")
                .d("DESCRIPTION", "\"_EM_5146_XYZ_\"")
                .d("AVAILABLE", "true")
            .and().insertInto("PRODUCT", 984L)
                .d("NAME", "\"}Pi\"")
                .d("DISTILLERY_ID", "0")
                .d("AGE", "-15384")
                .d("ALCOHOL", "-0.45948737599937495")
                .d("VOLUME", "0")
                .d("PRICE", "1085.9518439937624")
                .d("DESCRIPTION", "\"UQWJkR3g\"")
                .d("AVAILABLE", "false")
            .and().insertInto("PRODUCT", 985L)
                .d("NAME", "\"50PD9daAzT\"")
                .d("DISTILLERY_ID", "0")
                .d("AGE", "492")
                .d("ALCOHOL", "-5237210.227841485")
                .d("VOLUME", "628")
                .d("PRICE", "1.1021851496092452")
                .d("DESCRIPTION", "\"_EM_5148_XYZ_\"")
                .d("AVAILABLE", "true")
            .and().insertInto("PRODUCT", 986L)
                .d("NAME", "\"BRJfY\"")
                .d("DISTILLERY_ID", "49")
                .d("AGE", "2000")
                .d("ALCOHOL", "0.0")
                .d("VOLUME", "825")
                .d("PRICE", "1191757.2242032224")
                .d("DESCRIPTION", "\"GfkGmXuCX0if_G3J\"")
                .d("AVAILABLE", "true")
            .and().insertInto("CART", 987L)
                .d("TOTAL_ITEMS", "815")
                .d("PRODUCTS_COST", "269")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("CART", 988L)
                .d("TOTAL_ITEMS", "4197292")
                .d("PRODUCTS_COST", "632")
                .d("DELIVERY_INCLUDED", "true")
            .and().insertInto("CART", 989L)
                .d("TOTAL_ITEMS", "279")
                .d("PRODUCTS_COST", "8570")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("DISTILLERY", 3296L)
                .d("TITLE", "\"_EM_10088_XYZ_\"")
                .d("REGION_ID", "4988")
                .d("DESCRIPTION", "NULL")
            .and().insertInto("DISTILLERY", 3297L)
                .d("TITLE", "\"I8gf69NniavmINH\"")
                .d("REGION_ID", "383")
                .d("DESCRIPTION", "\"GP73\"")
            .and().insertInto("DISTILLERY", 3298L)
                .d("TITLE", "NULL")
                .d("REGION_ID", "0")
                .d("DESCRIPTION", "NULL")
            .and().insertInto("DISTILLERY", 3299L)
                .d("TITLE", "\"_EM_10089_XYZ_\"")
                .d("REGION_ID", "NULL")
                .d("DESCRIPTION", "\"kNx3lA\"")
            .and().insertInto("DISTILLERY", 3300L)
                .d("TITLE", "\"eSwgcw1wz25kI\"")
                .d("REGION_ID", "NULL")
                .d("DESCRIPTION", "NULL")
            .and().insertInto("USER_ACCOUNT", 3301L)
                .d("EMAIL", "\"_EM_9985_XYZ_\"")
                .d("PASSWORD", "\"pTH\"")
                .d("NAME", "\"OC9h\"")
                .d("ACTIVE", "true")
            .and().insertInto("USER_ACCOUNT", 3302L)
                .d("EMAIL", "\"\"")
                .d("PASSWORD", "\"9ZJ6n5BLPD05_D\"")
                .d("NAME", "NULL")
                .d("ACTIVE", "true")
            .and().insertInto("USER_ACCOUNT", 3303L)
                .d("EMAIL", "\"g627as6B\"")
                .d("PASSWORD", "\"L2uuEUAf\"")
                .d("NAME", "\"Bz1pgMIL\"")
                .d("ACTIVE", "false")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"_EM_3001_XYZ_\", " + 
                    " \"name\": \"-\" " + 
                    " } ")
                .post(baseUrlOfSut + "/register")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/register"))
                .body("'entityName'", containsString("userDTO"))
                .body("'fieldErrors'.size()", equalTo(2))
                .body("'fieldErrors'[0].'field'", containsString("phone"))
                .body("'fieldErrors'[0].'message'", containsString("The value shall not be empty"))
                .body("'fieldErrors'[1].'field'", containsString("email"))
                .body("'fieldErrors'[1].'message'", containsString("The value shall not be empty"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_15() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 2594L)
                .d("NAME", "NULL")
                .d("DISTILLERY_ID", "NULL")
                .d("AGE", "495")
                .d("ALCOHOL", "0.8645067026344353")
                .d("VOLUME", "592")
                .d("PRICE", "0.26428451407639997")
                .d("DESCRIPTION", "\"MOLO4RvvfkTY\"")
                .d("AVAILABLE", "false")
            .and().insertInto("CART", 2595L)
                .d("TOTAL_ITEMS", "110")
                .d("PRODUCTS_COST", "205")
                .d("DELIVERY_INCLUDED", "false")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"_EM_8787_XYZ_\", " + 
                    " \"password\": \"THM\", " + 
                    " \"phone\": \"_postfix\" " + 
                    " } ")
                .post(baseUrlOfSut + "/register")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/register"))
                .body("'entityName'", containsString("userDTO"))
                .body("'fieldErrors'.size()", equalTo(4))
                .body("'fieldErrors'[0].'field'", containsString("email"))
                .body("'fieldErrors'[0].'message'", containsString("The value shall not be empty"))
                .body("'fieldErrors'[1].'field'", containsString("password"))
                .body("'fieldErrors'[1].'message'", containsString("Length shall be between 6 and 50 characters"))
                .body("'fieldErrors'[2].'field'", containsString("phone"))
                .body("'fieldErrors'[2].'message'", containsString("Shall consist of a + sign, a country code, a region code (1-4 digits), and a number (6-7 digits)"))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_16() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTACTS", 972L)
                .d("PHONE", "\"_EM_3230_XYZ_\"")
                .d("ADDRESS", "\"_EM_8094_XYZ_\"")
                .d("CITY_REGION", "\"eJ_oC\"")
            .and().insertInto("CONTACTS", 973L)
                .d("PHONE", "NULL")
                .d("ADDRESS", "\"Ta\"")
                .d("CITY_REGION", "\"_EM_8095_XYZ_\"")
            .and().insertInto("USER_ROLE", 974L)
                .d("USER_ID", "981")
                .d("ROLE_ID", "658")
            .and().insertInto("USER_ROLE", 975L)
                .d("USER_ID", "2097413")
                .d("ROLE_ID", "472")
            .and().insertInto("USER_ROLE", 976L)
                .d("USER_ID", "765")
                .d("ROLE_ID", "-125828396")
            .and().insertInto("USER_ROLE", 977L)
                .d("USER_ID", "5")
                .d("ROLE_ID", "262144")
            .and().insertInto("USER_ROLE", 978L)
                .d("USER_ID", "8389560")
                .d("ROLE_ID", "0")
            .and().insertInto("CUSTOMER_ORDER", 979L)
                .d("ID", "-523979")
                .d("USER_ACCOUNT_ID", "4")
                .d("DATE_CREATED", "\"1963-09-01\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "1024")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "2097811")
            .and().insertInto("CUSTOMER_ORDER", 980L)
                .d("ID", "1721")
                .d("USER_ACCOUNT_ID", "-2211037008098573397")
                .d("DATE_CREATED", "\"2001-06-25\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "502")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "478")
            .and().insertInto("CUSTOMER_ORDER", 981L)
                .d("ID", "-131071")
                .d("USER_ACCOUNT_ID", "0")
                .d("DATE_CREATED", "\"2067-05-30\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "330")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "2097813")
            .and().insertInto("CUSTOMER_ORDER", 982L)
                .d("ID", "33563415")
                .d("USER_ACCOUNT_ID", "0")
                .d("DATE_CREATED", "\"1993-10-31\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "781")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "0")
            .and().insertInto("PRODUCT", 998L)
                .d("NAME", "\"_EM_8096_XYZ_\"")
                .d("DISTILLERY_ID", "-2")
                .d("AGE", "735")
                .d("ALCOHOL", "0.923288")
                .d("VOLUME", "-130286")
                .d("PRICE", "0.2756708154744373")
                .d("DESCRIPTION", "\"D3AHIGg79\"")
                .d("AVAILABLE", "false")
            .and().insertInto("PRODUCT", 999L)
                .d("NAME", "\"e_Byeo\"")
                .d("DISTILLERY_ID", "838")
                .d("AGE", "826")
                .d("ALCOHOL", "0.0")
                .d("VOLUME", "66522")
                .d("PRICE", "-0.1624334161590985")
                .d("DESCRIPTION", "\"19LvFSEgjU\"")
                .d("AVAILABLE", "true")
            .and().insertInto("PRODUCT", 1000L)
                .d("NAME", "\"_EM_8097_XYZ_\"")
                .d("DISTILLERY_ID", "91")
                .d("AGE", "-15385")
                .d("ALCOHOL", "0.0")
                .d("VOLUME", "-1024")
                .d("PRICE", "0.0")
                .d("DESCRIPTION", "\"jkFQ\"")
                .d("AVAILABLE", "true")
            .and().insertInto("CART", 1001L)
                .d("TOTAL_ITEMS", "-1537317963")
                .d("PRODUCTS_COST", "4195830")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("DISTILLERY", 1147L)
                .d("TITLE", "\"FjFnjlXS4wR\"")
                .d("REGION_ID", "NULL")
                .d("DESCRIPTION", "\"_EM_4424_XYZ_\"")
            .and().insertInto("DISTILLERY", 1148L)
                .d("TITLE", "\"gkL16vcEXduN\"")
                .d("REGION_ID", "432")
                .d("DESCRIPTION", "\"_EM_4425_XYZ_\"")
            .and().insertInto("ORDERED_PRODUCT", 4025L)
                .d("CUSTOMER_ORDER_ID", "NULL")
                .d("PRODUCT_ID", "NULL")
                .d("QUANTITY", "909")
            .and().insertInto("ORDERED_PRODUCT", 4026L)
                .d("CUSTOMER_ORDER_ID", "521")
                .d("PRODUCT_ID", "NULL")
                .d("QUANTITY", "NULL")
            .and().insertInto("ORDERED_PRODUCT", 4027L)
                .d("CUSTOMER_ORDER_ID", "NULL")
                .d("PRODUCT_ID", "NULL")
                .d("QUANTITY", "37")
            .and().insertInto("BILL", 4028L)
                .d("NUMBER", "615")
                .d("DATE_CREATED", "\"2069-01-21\"")
                .d("TOTAL_COST", "707")
                .d("PAYED", "false")
                .d("CC_NUMBER", "\"KH7\"")
            .and().insertInto("BILL", 4029L)
                .d("NUMBER", "871")
                .d("DATE_CREATED", "NULL")
                .d("TOTAL_COST", "845")
                .d("PAYED", "false")
                .d("CC_NUMBER", "\"Ylzuj\"")
            .and().insertInto("BILL", 4030L)
                .d("NUMBER", "614")
                .d("DATE_CREATED", "\"2014-05-16\"")
                .d("TOTAL_COST", "301")
                .d("PAYED", "false")
                .d("CC_NUMBER", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/customer/cart/pay?name=_EM_3008_XYZ_")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/customer/cart/pay"))
                .body("'entityName'", containsString("creditCardDTO"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("ccNumber"))
                .body("'fieldErrors'[0].'message'", containsString("The value shall not be empty"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }


}
