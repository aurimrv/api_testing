package market;
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-03T21:52:53.840-03:00[America/Araguaina]
 * <br>
 * The generated test suite contains 10 tests
 * <br>
 * Covered targets: 340
 * <br>
 * Used time: 1h 0m 9s
 * <br>
 * Needed budget for current results: 83%
 * <br>
 * This file contains test cases that are likely to indicate faults.
 */
public class seed10_EvoMaster_faults_Test {

    
    private static final SutHandler controller = new em.embedded.market.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("CONTACTS","USER_ROLE","CUSTOMER_ORDER","PRODUCT","CART","DISTILLERY","ORDERED_PRODUCT","BILL","USER_ACCOUNT"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * [test_0_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test @Timeout(60)
    public void test_0_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"_links\": [ " + 
                    " { " + 
                    " \"hreflang\": \"_EM_60_XYZ_\", " + 
                    " \"media\": \"_EM_61_XYZ_\", " + 
                    " \"rel\": {}, " + 
                    " \"title\": \"_EM_64_XYZ_\", " + 
                    " \"type\": \"_EM_65_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"media\": \"_EM_68_XYZ_\", " + 
                    " \"name\": \"_EM_69_XYZ_\", " + 
                    " \"rel\": { " + 
                    " \"_EM_71_XYZ_\": \"_EM_72_XYZ_\" " + 
                    " } " + 
                    " }, " + 
                    " { " + 
                    " \"href\": \"_EM_76_XYZ_\", " + 
                    " \"name\": \"_EM_79_XYZ_\", " + 
                    " \"profile\": \"_EM_80_XYZ_\", " + 
                    " \"title\": \"_EM_91_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"deprecation\": \"_EM_93_XYZ_\", " + 
                    " \"hreflang\": \"_EM_95_XYZ_\", " + 
                    " \"media\": \"_EM_96_XYZ_\", " + 
                    " \"rel\": { " + 
                    " \"_EM_98_XYZ_\": \"\", " + 
                    " \"_EM_99_XYZ_\": \"_EM_100_XYZ_\", " + 
                    " \"_EM_101_XYZ_\": \"_EM_102_XYZ_\", " + 
                    " \"_EM_103_XYZ_\": \"_EM_104_XYZ_\" " + 
                    " }, " + 
                    " \"type\": \"_EM_106_XYZ_\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/contacts?" + 
                    "name=_EM_57_XYZ_&" + 
                    "EMextraParam123=_EM_108_XYZ_")
                .then()
                .statusCode(500) // market/rest/exception/RestErrorResponse_50_getFieldErrors
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("JSON parse error: Expected relation name; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Expected relation name\n at [Source: (ByteArrayInputStream); line: 1, column: 13] (through reference chain: market.dto.ContactsDTO[\"_links\"])"))
                .body("'description'", containsString("uri=/customer/contacts"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_1_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test @Timeout(60)
    public void test_1_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "_EM_144_XYZ_")
                .get(baseUrlOfSut + "/customer/contacts")
                .then()
                .statusCode(500) // market/dto/assembler/ContactsDtoAssembler_12_toModel
                .assertThat()
                .contentType("application/json")
                .body("'message'", nullValue())
                .body("'description'", containsString("uri=/customer/contacts"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_2_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test @Timeout(60)
    public void test_2_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 2594L)
                .d("NAME", "NULL")
                .d("DISTILLERY_ID", "NULL")
                .d("AGE", "495")
                .d("ALCOHOL", "0.8645067026344353")
                .d("VOLUME", "592")
                .d("PRICE", "0.26428451407639997")
                .d("DESCRIPTION", "\"MOLO4RvvfkTY\"")
                .d("AVAILABLE", "false")
            .and().insertInto("CART", 2595L)
                .d("TOTAL_ITEMS", "110")
                .d("PRODUCTS_COST", "205")
                .d("DELIVERY_INCLUDED", "false")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/products")
                .then()
                .statusCode(500) // market/service/impl/ProductServiceImpl_37_findAll
                .assertThat()
                .contentType("application/json")
                .body("'message'", nullValue())
                .body("'description'", containsString("uri=/products"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_3_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test @Timeout(60)
    public void test_3_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTACTS", 972L)
                .d("PHONE", "\"_EM_3230_XYZ_\"")
                .d("ADDRESS", "\"_EM_8094_XYZ_\"")
                .d("CITY_REGION", "\"eJ_oC\"")
            .and().insertInto("CONTACTS", 973L)
                .d("PHONE", "NULL")
                .d("ADDRESS", "\"Ta\"")
                .d("CITY_REGION", "\"_EM_8095_XYZ_\"")
            .and().insertInto("USER_ROLE", 974L)
                .d("USER_ID", "981")
                .d("ROLE_ID", "658")
            .and().insertInto("USER_ROLE", 975L)
                .d("USER_ID", "2097413")
                .d("ROLE_ID", "472")
            .and().insertInto("USER_ROLE", 976L)
                .d("USER_ID", "765")
                .d("ROLE_ID", "-125828396")
            .and().insertInto("USER_ROLE", 977L)
                .d("USER_ID", "5")
                .d("ROLE_ID", "262144")
            .and().insertInto("USER_ROLE", 978L)
                .d("USER_ID", "8389560")
                .d("ROLE_ID", "0")
            .and().insertInto("CUSTOMER_ORDER", 979L)
                .d("ID", "-523979")
                .d("USER_ACCOUNT_ID", "4")
                .d("DATE_CREATED", "\"1963-09-01\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "1024")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "2097811")
            .and().insertInto("CUSTOMER_ORDER", 980L)
                .d("ID", "1721")
                .d("USER_ACCOUNT_ID", "-2211037008098573397")
                .d("DATE_CREATED", "\"2001-06-25\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "502")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "478")
            .and().insertInto("CUSTOMER_ORDER", 981L)
                .d("ID", "-131071")
                .d("USER_ACCOUNT_ID", "0")
                .d("DATE_CREATED", "\"2067-05-30\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "330")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "2097813")
            .and().insertInto("CUSTOMER_ORDER", 982L)
                .d("ID", "33563415")
                .d("USER_ACCOUNT_ID", "0")
                .d("DATE_CREATED", "\"1993-10-31\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "781")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "0")
            .and().insertInto("PRODUCT", 998L)
                .d("NAME", "\"_EM_8096_XYZ_\"")
                .d("DISTILLERY_ID", "-2")
                .d("AGE", "735")
                .d("ALCOHOL", "0.923288")
                .d("VOLUME", "-130286")
                .d("PRICE", "0.2756708154744373")
                .d("DESCRIPTION", "\"D3AHIGg79\"")
                .d("AVAILABLE", "false")
            .and().insertInto("PRODUCT", 999L)
                .d("NAME", "\"e_Byeo\"")
                .d("DISTILLERY_ID", "838")
                .d("AGE", "826")
                .d("ALCOHOL", "0.0")
                .d("VOLUME", "66522")
                .d("PRICE", "-0.1624334161590985")
                .d("DESCRIPTION", "\"19LvFSEgjU\"")
                .d("AVAILABLE", "true")
            .and().insertInto("PRODUCT", 1000L)
                .d("NAME", "\"_EM_8097_XYZ_\"")
                .d("DISTILLERY_ID", "91")
                .d("AGE", "-15385")
                .d("ALCOHOL", "0.0")
                .d("VOLUME", "-1024")
                .d("PRICE", "0.0")
                .d("DESCRIPTION", "\"jkFQ\"")
                .d("AVAILABLE", "true")
            .and().insertInto("CART", 1001L)
                .d("TOTAL_ITEMS", "-1537317963")
                .d("PRODUCTS_COST", "4195830")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("DISTILLERY", 1147L)
                .d("TITLE", "\"FjFnjlXS4wR\"")
                .d("REGION_ID", "NULL")
                .d("DESCRIPTION", "\"_EM_4424_XYZ_\"")
            .and().insertInto("DISTILLERY", 1148L)
                .d("TITLE", "\"gkL16vcEXduN\"")
                .d("REGION_ID", "432")
                .d("DESCRIPTION", "\"_EM_4425_XYZ_\"")
            .and().insertInto("ORDERED_PRODUCT", 4025L)
                .d("CUSTOMER_ORDER_ID", "NULL")
                .d("PRODUCT_ID", "NULL")
                .d("QUANTITY", "909")
            .and().insertInto("ORDERED_PRODUCT", 4026L)
                .d("CUSTOMER_ORDER_ID", "521")
                .d("PRODUCT_ID", "NULL")
                .d("QUANTITY", "NULL")
            .and().insertInto("ORDERED_PRODUCT", 4027L)
                .d("CUSTOMER_ORDER_ID", "NULL")
                .d("PRODUCT_ID", "NULL")
                .d("QUANTITY", "37")
            .and().insertInto("BILL", 4028L)
                .d("NUMBER", "615")
                .d("DATE_CREATED", "\"2069-01-21\"")
                .d("TOTAL_COST", "707")
                .d("PAYED", "false")
                .d("CC_NUMBER", "\"KH7\"")
            .and().insertInto("BILL", 4029L)
                .d("NUMBER", "871")
                .d("DATE_CREATED", "NULL")
                .d("TOTAL_COST", "845")
                .d("PAYED", "false")
                .d("CC_NUMBER", "\"Ylzuj\"")
            .and().insertInto("BILL", 4030L)
                .d("NUMBER", "614")
                .d("DATE_CREATED", "\"2014-05-16\"")
                .d("TOTAL_COST", "301")
                .d("PAYED", "false")
                .d("CC_NUMBER", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"_links\": [ " + 
                    " { " + 
                    " \"href\": \"DYVVGzk0Wmb\", " + 
                    " \"hreflang\": \"\", " + 
                    " \"media\": \"MloqETmoMK03Mg\", " + 
                    " \"profile\": \"IfgswszIvE8\" " + 
                    " }, " + 
                    " { " + 
                    " \"href\": \"0dEB6nZ1tvCb\", " + 
                    " \"hreflang\": \"c3Y5HWRDl7x\", " + 
                    " \"name\": \"oo5At\", " + 
                    " \"rel\": {}, " + 
                    " \"title\": \"ru09V5xCLJK\" " + 
                    " }, " + 
                    " { " + 
                    " \"href\": \"Neohu3u1F3E\", " + 
                    " \"hreflang\": \"gtpZ6\", " + 
                    " \"title\": \"Mi9M_kDGZJdp\", " + 
                    " \"type\": \"NmMQArjy8C8E\" " + 
                    " }, " + 
                    " { " + 
                    " \"deprecation\": \"l7OOpwSXnZ\", " + 
                    " \"hreflang\": \"EYzbAFHWux7G\", " + 
                    " \"media\": \"hApN5nsaS9U2\", " + 
                    " \"rel\": { " + 
                    " \"VR5_ofASfqoq\": \"uti\", " + 
                    " \"\": \"WR\", " + 
                    " \"OY866iAYLSGXuXVA\": \"B\", " + 
                    " \"E\": \"C2D\" " + 
                    " }, " + 
                    " \"title\": \"B\", " + 
                    " \"type\": \"58XLFfizzkhaBf\" " + 
                    " } " + 
                    " ], " + 
                    " \"email\": \"\" " + 
                    " } ")
                .post(baseUrlOfSut + "/register?EMextraParam123=42")
                .then()
                .statusCode(500) // market/rest/exception/RestErrorResponse_50_getFieldErrors
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("JSON parse error: Expected relation name; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Expected relation name\n at [Source: (ByteArrayInputStream); line: 1, column: 13] (through reference chain: market.dto.UserDTO[\"_links\"])"))
                .body("'description'", containsString("uri=/register"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_4_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test @Timeout(60)
    public void test_4_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTACTS", 972L)
                .d("PHONE", "\"_EM_3230_XYZ_\"")
                .d("ADDRESS", "\"_EM_8094_XYZ_\"")
                .d("CITY_REGION", "\"eJ_oC\"")
            .and().insertInto("CONTACTS", 973L)
                .d("PHONE", "NULL")
                .d("ADDRESS", "\"Ta\"")
                .d("CITY_REGION", "\"_EM_8095_XYZ_\"")
            .and().insertInto("USER_ROLE", 974L)
                .d("USER_ID", "981")
                .d("ROLE_ID", "658")
            .and().insertInto("USER_ROLE", 975L)
                .d("USER_ID", "2097413")
                .d("ROLE_ID", "472")
            .and().insertInto("USER_ROLE", 976L)
                .d("USER_ID", "765")
                .d("ROLE_ID", "-125828396")
            .and().insertInto("USER_ROLE", 977L)
                .d("USER_ID", "5")
                .d("ROLE_ID", "262144")
            .and().insertInto("USER_ROLE", 978L)
                .d("USER_ID", "8389560")
                .d("ROLE_ID", "0")
            .and().insertInto("CUSTOMER_ORDER", 979L)
                .d("ID", "-523979")
                .d("USER_ACCOUNT_ID", "4")
                .d("DATE_CREATED", "\"1963-09-01\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "1024")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "2097811")
            .and().insertInto("CUSTOMER_ORDER", 980L)
                .d("ID", "1721")
                .d("USER_ACCOUNT_ID", "-2211037008098573397")
                .d("DATE_CREATED", "\"2001-06-25\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "502")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "478")
            .and().insertInto("CUSTOMER_ORDER", 981L)
                .d("ID", "-131071")
                .d("USER_ACCOUNT_ID", "0")
                .d("DATE_CREATED", "\"2067-05-30\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "330")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "2097813")
            .and().insertInto("CUSTOMER_ORDER", 982L)
                .d("ID", "33563415")
                .d("USER_ACCOUNT_ID", "0")
                .d("DATE_CREATED", "\"1993-10-31\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "781")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "0")
            .and().insertInto("PRODUCT", 998L)
                .d("NAME", "\"_EM_8096_XYZ_\"")
                .d("DISTILLERY_ID", "-2")
                .d("AGE", "735")
                .d("ALCOHOL", "0.923288")
                .d("VOLUME", "-130286")
                .d("PRICE", "0.2756708154744373")
                .d("DESCRIPTION", "\"D3AHIGg79\"")
                .d("AVAILABLE", "false")
            .and().insertInto("PRODUCT", 999L)
                .d("NAME", "\"e_Byeo\"")
                .d("DISTILLERY_ID", "838")
                .d("AGE", "826")
                .d("ALCOHOL", "0.0")
                .d("VOLUME", "66522")
                .d("PRICE", "-0.1624334161590985")
                .d("DESCRIPTION", "\"19LvFSEgjU\"")
                .d("AVAILABLE", "true")
            .and().insertInto("PRODUCT", 1000L)
                .d("NAME", "\"_EM_8097_XYZ_\"")
                .d("DISTILLERY_ID", "91")
                .d("AGE", "-15385")
                .d("ALCOHOL", "0.0")
                .d("VOLUME", "-1024")
                .d("PRICE", "0.0")
                .d("DESCRIPTION", "\"jkFQ\"")
                .d("AVAILABLE", "true")
            .and().insertInto("CART", 1001L)
                .d("TOTAL_ITEMS", "-1537317963")
                .d("PRODUCTS_COST", "4195830")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("DISTILLERY", 1147L)
                .d("TITLE", "\"FjFnjlXS4wR\"")
                .d("REGION_ID", "NULL")
                .d("DESCRIPTION", "\"_EM_4424_XYZ_\"")
            .and().insertInto("DISTILLERY", 1148L)
                .d("TITLE", "\"gkL16vcEXduN\"")
                .d("REGION_ID", "432")
                .d("DESCRIPTION", "\"_EM_4425_XYZ_\"")
            .and().insertInto("ORDERED_PRODUCT", 4025L)
                .d("CUSTOMER_ORDER_ID", "NULL")
                .d("PRODUCT_ID", "NULL")
                .d("QUANTITY", "909")
            .and().insertInto("ORDERED_PRODUCT", 4026L)
                .d("CUSTOMER_ORDER_ID", "521")
                .d("PRODUCT_ID", "NULL")
                .d("QUANTITY", "NULL")
            .and().insertInto("ORDERED_PRODUCT", 4027L)
                .d("CUSTOMER_ORDER_ID", "NULL")
                .d("PRODUCT_ID", "NULL")
                .d("QUANTITY", "37")
            .and().insertInto("BILL", 4028L)
                .d("NUMBER", "615")
                .d("DATE_CREATED", "\"2069-01-21\"")
                .d("TOTAL_COST", "707")
                .d("PAYED", "false")
                .d("CC_NUMBER", "\"KH7\"")
            .and().insertInto("BILL", 4029L)
                .d("NUMBER", "871")
                .d("DATE_CREATED", "NULL")
                .d("TOTAL_COST", "845")
                .d("PAYED", "false")
                .d("CC_NUMBER", "\"Ylzuj\"")
            .and().insertInto("BILL", 4030L)
                .d("NUMBER", "614")
                .d("DATE_CREATED", "\"2014-05-16\"")
                .d("TOTAL_COST", "301")
                .d("PAYED", "false")
                .d("CC_NUMBER", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"_links\": [ " + 
                    " { " + 
                    " \"deprecation\": \"gK9g4\", " + 
                    " \"href\": \"_EM_2948_XYZ_\", " + 
                    " \"profile\": \"_EM_2952_XYZ_\", " + 
                    " \"type\": \"_EM_2954_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"deprecation\": \"_EM_3033_XYZ_\", " + 
                    " \"href\": \"_EM_2956_XYZ_\", " + 
                    " \"hreflang\": \"g0bJdyAnKKy\", " + 
                    " \"media\": \"_EM_2958_XYZ_\", " + 
                    " \"name\": \"zriYGBkEX9QZ\", " + 
                    " \"profile\": \"_EM_8091_XYZ_\", " + 
                    " \"rel\": {}, " + 
                    " \"title\": \"_EM_2961_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"href\": \"_EM_2964_XYZ_\", " + 
                    " \"hreflang\": \"S\", " + 
                    " \"media\": \"_EM_3034_XYZ_\", " + 
                    " \"name\": \"_EM_2966_XYZ_\", " + 
                    " \"profile\": \"_EM_3035_XYZ_\", " + 
                    " \"rel\": { " + 
                    " \"OP1IEKL\": \"FDflJs6Gk\", " + 
                    " \"_EM_2969_XYZ_\": \"_EM_3036_XYZ_\" " + 
                    " }, " + 
                    " \"title\": \"s6QFo2AXhm\", " + 
                    " \"type\": \"_EM_2971_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"href\": \"_EM_8092_XYZ_\", " + 
                    " \"hreflang\": \"zIgE_GcuA\", " + 
                    " \"media\": \"2zo\", " + 
                    " \"name\": \"81ijCCTSKrl53DW\", " + 
                    " \"title\": \"_EM_8093_XYZ_\", " + 
                    " \"type\": \"_EM_2979_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"productId\": -33291695, " + 
                    " \"quantity\": 443 " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/cart?name=_EM_2947_XYZ_")
                .then()
                .statusCode(500) // market/rest/exception/RestErrorResponse_50_getFieldErrors
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("JSON parse error: Expected relation name; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Expected relation name\n at [Source: (ByteArrayInputStream); line: 1, column: 13] (through reference chain: market.dto.CartItemDTO[\"_links\"])"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_5_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test @Timeout(60)
    public void test_5_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTACTS", 972L)
                .d("PHONE", "\"_EM_3230_XYZ_\"")
                .d("ADDRESS", "\"_EM_8094_XYZ_\"")
                .d("CITY_REGION", "\"eJ_oC\"")
            .and().insertInto("CONTACTS", 973L)
                .d("PHONE", "NULL")
                .d("ADDRESS", "\"Ta\"")
                .d("CITY_REGION", "\"_EM_8095_XYZ_\"")
            .and().insertInto("USER_ROLE", 974L)
                .d("USER_ID", "981")
                .d("ROLE_ID", "658")
            .and().insertInto("USER_ROLE", 975L)
                .d("USER_ID", "2097413")
                .d("ROLE_ID", "472")
            .and().insertInto("USER_ROLE", 976L)
                .d("USER_ID", "765")
                .d("ROLE_ID", "-125828396")
            .and().insertInto("USER_ROLE", 977L)
                .d("USER_ID", "5")
                .d("ROLE_ID", "262144")
            .and().insertInto("USER_ROLE", 978L)
                .d("USER_ID", "8389560")
                .d("ROLE_ID", "0")
            .and().insertInto("CUSTOMER_ORDER", 979L)
                .d("ID", "-523979")
                .d("USER_ACCOUNT_ID", "4")
                .d("DATE_CREATED", "\"1963-09-01\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "1024")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "2097811")
            .and().insertInto("CUSTOMER_ORDER", 980L)
                .d("ID", "1721")
                .d("USER_ACCOUNT_ID", "-2211037008098573397")
                .d("DATE_CREATED", "\"2001-06-25\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "502")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "478")
            .and().insertInto("CUSTOMER_ORDER", 981L)
                .d("ID", "-131071")
                .d("USER_ACCOUNT_ID", "0")
                .d("DATE_CREATED", "\"2067-05-30\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "330")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "2097813")
            .and().insertInto("CUSTOMER_ORDER", 982L)
                .d("ID", "33563415")
                .d("USER_ACCOUNT_ID", "0")
                .d("DATE_CREATED", "\"1993-10-31\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "781")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "0")
            .and().insertInto("PRODUCT", 998L)
                .d("NAME", "\"_EM_8096_XYZ_\"")
                .d("DISTILLERY_ID", "-2")
                .d("AGE", "735")
                .d("ALCOHOL", "0.923288")
                .d("VOLUME", "-130286")
                .d("PRICE", "0.2756708154744373")
                .d("DESCRIPTION", "\"D3AHIGg79\"")
                .d("AVAILABLE", "false")
            .and().insertInto("PRODUCT", 999L)
                .d("NAME", "\"e_Byeo\"")
                .d("DISTILLERY_ID", "838")
                .d("AGE", "826")
                .d("ALCOHOL", "0.0")
                .d("VOLUME", "66522")
                .d("PRICE", "-0.1624334161590985")
                .d("DESCRIPTION", "\"19LvFSEgjU\"")
                .d("AVAILABLE", "true")
            .and().insertInto("PRODUCT", 1000L)
                .d("NAME", "\"_EM_8097_XYZ_\"")
                .d("DISTILLERY_ID", "91")
                .d("AGE", "-15385")
                .d("ALCOHOL", "0.0")
                .d("VOLUME", "-1024")
                .d("PRICE", "0.0")
                .d("DESCRIPTION", "\"jkFQ\"")
                .d("AVAILABLE", "true")
            .and().insertInto("CART", 1001L)
                .d("TOTAL_ITEMS", "-1537317963")
                .d("PRODUCTS_COST", "4195830")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("DISTILLERY", 1147L)
                .d("TITLE", "\"FjFnjlXS4wR\"")
                .d("REGION_ID", "NULL")
                .d("DESCRIPTION", "\"_EM_4424_XYZ_\"")
            .and().insertInto("DISTILLERY", 1148L)
                .d("TITLE", "\"gkL16vcEXduN\"")
                .d("REGION_ID", "432")
                .d("DESCRIPTION", "\"_EM_4425_XYZ_\"")
            .and().insertInto("ORDERED_PRODUCT", 4025L)
                .d("CUSTOMER_ORDER_ID", "NULL")
                .d("PRODUCT_ID", "NULL")
                .d("QUANTITY", "909")
            .and().insertInto("ORDERED_PRODUCT", 4026L)
                .d("CUSTOMER_ORDER_ID", "521")
                .d("PRODUCT_ID", "NULL")
                .d("QUANTITY", "NULL")
            .and().insertInto("ORDERED_PRODUCT", 4027L)
                .d("CUSTOMER_ORDER_ID", "NULL")
                .d("PRODUCT_ID", "NULL")
                .d("QUANTITY", "37")
            .and().insertInto("BILL", 4028L)
                .d("NUMBER", "615")
                .d("DATE_CREATED", "\"2069-01-21\"")
                .d("TOTAL_COST", "707")
                .d("PAYED", "false")
                .d("CC_NUMBER", "\"KH7\"")
            .and().insertInto("BILL", 4029L)
                .d("NUMBER", "871")
                .d("DATE_CREATED", "NULL")
                .d("TOTAL_COST", "845")
                .d("PAYED", "false")
                .d("CC_NUMBER", "\"Ylzuj\"")
            .and().insertInto("BILL", 4030L)
                .d("NUMBER", "614")
                .d("DATE_CREATED", "\"2014-05-16\"")
                .d("TOTAL_COST", "301")
                .d("PAYED", "false")
                .d("CC_NUMBER", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/products")
                .then()
                .statusCode(500) // market/service/impl/ProductServiceImpl_35_findAll
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Unable to find market.domain.Distillery with id -2; nested exception is javax.persistence.EntityNotFoundException: Unable to find market.domain.Distillery with id -2"))
                .body("'description'", containsString("uri=/products"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_6_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test @Timeout(60)
    public void test_6_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "_EM_152_XYZ_")
                .get(baseUrlOfSut + "/customer?EMextraParam123=_EM_151_XYZ_")
                .then()
                .statusCode(500) // market/dto/assembler/UserAccountDtoAssembler_16_toModel
                .assertThat()
                .contentType("application/json")
                .body("'message'", nullValue())
                .body("'description'", containsString("uri=/customer"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_7_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test @Timeout(60)
    public void test_7_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTACTS", 350L)
                .d("PHONE", "\"egFSmFauS20L\"")
                .d("ADDRESS", "\"_EM_4931_XYZ_\"")
                .d("CITY_REGION", "\"FMn\"")
            .and().insertInto("CUSTOMER_ORDER", 567L)
                .d("ID", "0")
                .d("USER_ACCOUNT_ID", "NULL")
                .d("DATE_CREATED", "\"2040-01-10\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "-2048")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "16777698")
            .and().insertInto("CUSTOMER_ORDER", 568L)
                .d("ID", "852")
                .d("USER_ACCOUNT_ID", "-1873")
                .d("DATE_CREATED", "\"2058-10-30\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "227")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "-445247748")
            .and().insertInto("CUSTOMER_ORDER", 569L)
                .d("ID", "0")
                .d("USER_ACCOUNT_ID", "160")
                .d("DATE_CREATED", "\"2100-04-30\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "0")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "-1048019")
            .and().insertInto("CART", 570L)
                .d("TOTAL_ITEMS", "922")
                .d("PRODUCTS_COST", "0")
                .d("DELIVERY_INCLUDED", "true")
            .and().insertInto("CART", 571L)
                .d("TOTAL_ITEMS", "NULL")
                .d("PRODUCTS_COST", "346")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("CART", 572L)
                .d("TOTAL_ITEMS", "784")
                .d("PRODUCTS_COST", "33580")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("CART", 573L)
                .d("TOTAL_ITEMS", "816")
                .d("PRODUCTS_COST", "4155")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("PRODUCT", 1707L)
                .d("NAME", "\"MjfmJA\"")
                .d("DISTILLERY_ID", "988")
                .d("AGE", "836")
                .d("ALCOHOL", "0.30093478368466114")
                .d("VOLUME", "-64")
                .d("PRICE", "0.0")
                .d("DESCRIPTION", "NULL")
                .d("AVAILABLE", "true")
            .and().insertInto("PRODUCT", 1708L)
                .d("NAME", "\"_EM_7117_XYZ_\"")
                .d("DISTILLERY_ID", "NULL")
                .d("AGE", "-7780")
                .d("ALCOHOL", "0.25501119308937215")
                .d("VOLUME", "944")
                .d("PRICE", "0.1542133800688582")
                .d("DESCRIPTION", "\"_EM_5515_XYZ_\"")
                .d("AVAILABLE", "true")
            .and().insertInto("PRODUCT", 1709L)
                .d("NAME", "\"_EM_4932_XYZ_5\"")
                .d("DISTILLERY_ID", "777")
                .d("AGE", "-880")
                .d("ALCOHOL", "0.5917214096197392")
                .d("VOLUME", "-8192")
                .d("PRICE", "0.0")
                .d("DESCRIPTION", "\"89CzsH439TBS\"")
                .d("AVAILABLE", "true")
            .and().insertInto("PRODUCT", 1710L)
                .d("NAME", "\"W9pEed_Kr\"")
                .d("DISTILLERY_ID", "0")
                .d("AGE", "NULL")
                .d("ALCOHOL", "740447.0358393337")
                .d("VOLUME", "-16776815")
                .d("PRICE", "0.062096072003313796")
                .d("DESCRIPTION", "\"_EM_7118_XYZ_\"")
                .d("AVAILABLE", "false")
            .and().insertInto("PRODUCT", 1711L)
                .d("NAME", "\"2\"")
                .d("DISTILLERY_ID", "132080")
                .d("AGE", "-8590")
                .d("ALCOHOL", "2.834808147069885")
                .d("VOLUME", "-2097027")
                .d("PRICE", "0.65734")
                .d("DESCRIPTION", "\"8fb7w1yyRajs\"")
                .d("AVAILABLE", "false")
            .and().insertInto("USER_ACCOUNT", 2121L)
                .d("EMAIL", "\"_EM_7119_XYZ_\"")
                .d("PASSWORD", "\"_EM_7120_XYZ_\"")
                .d("NAME", "\"2z\"")
                .d("ACTIVE", "false")
            .and().insertInto("USER_ACCOUNT", 2122L)
                .d("EMAIL", "\"6jEqh\"")
                .d("PASSWORD", "\"QK1S_Z\"")
                .d("NAME", "\"LHl\"")
                .d("ACTIVE", "false")
            .and().insertInto("USER_ACCOUNT", 2123L)
                .d("EMAIL", "\"DGJgTMMjn5DIxM7_\"")
                .d("PASSWORD", "\"pi5i1uzpO\"")
                .d("NAME", "NULL")
                .d("ACTIVE", "true")
            .and().insertInto("USER_ACCOUNT", 2124L)
                .d("EMAIL", "NULL")
                .d("PASSWORD", "\"RC10\"")
                .d("NAME", "\"YELeklmk2jEJwe\"")
                .d("ACTIVE", "false")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/orders/0")
                .then()
                .statusCode(500) // market/dto/assembler/OrderDtoAssembler_17_toModel
                .assertThat()
                .contentType("application/json")
                .body("'message'", nullValue())
                .body("'description'", containsString("uri=/customer/orders/0"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_8_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test @Timeout(60)
    public void test_8_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTACTS", 972L)
                .d("PHONE", "\"_EM_10087_XYZ_\"")
                .d("ADDRESS", "\"z1ayYePGfVmv\"")
                .d("CITY_REGION", "\"eJ_kC\"")
            .and().insertInto("CONTACTS", 973L)
                .d("PHONE", "\"ardbeg\"")
                .d("ADDRESS", "\"Si\"")
                .d("CITY_REGION", "\"Xxg8jE\"")
            .and().insertInto("USER_ROLE", 974L)
                .d("USER_ID", "965")
                .d("ROLE_ID", "590")
            .and().insertInto("USER_ROLE", 975L)
                .d("USER_ID", "-65275")
                .d("ROLE_ID", "0")
            .and().insertInto("USER_ROLE", 976L)
                .d("USER_ID", "NULL")
                .d("ROLE_ID", "724")
            .and().insertInto("USER_ROLE", 977L)
                .d("USER_ID", "0")
                .d("ROLE_ID", "-8")
            .and().insertInto("USER_ROLE", 978L)
                .d("USER_ID", "-2128968")
                .d("ROLE_ID", "314")
            .and().insertInto("CUSTOMER_ORDER", 979L)
                .d("ID", "309")
                .d("USER_ACCOUNT_ID", "-1915113906")
                .d("DATE_CREATED", "\"2000-06-30\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "0")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "659")
            .and().insertInto("CUSTOMER_ORDER", 980L)
                .d("ID", "0")
                .d("USER_ACCOUNT_ID", "1")
                .d("DATE_CREATED", "\"2047-03-17\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "8696")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "1054")
            .and().insertInto("CUSTOMER_ORDER", 981L)
                .d("ID", "65586")
                .d("USER_ACCOUNT_ID", "458")
                .d("DATE_CREATED", "\"2100-09-01\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "74")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "0")
            .and().insertInto("CUSTOMER_ORDER", 982L)
                .d("ID", "791")
                .d("USER_ACCOUNT_ID", "525046")
                .d("DATE_CREATED", "\"2000-01-30\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "0")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "-524284")
            .and().insertInto("PRODUCT", 983L)
                .d("NAME", "\"_EM_10013_XYZ_\"")
                .d("DISTILLERY_ID", "NULL")
                .d("AGE", "-15384")
                .d("ALCOHOL", "1.6794182102503832")
                .d("VOLUME", "9")
                .d("PRICE", "0.0")
                .d("DESCRIPTION", "\"_EM_5146_XYZ_\"")
                .d("AVAILABLE", "true")
            .and().insertInto("PRODUCT", 984L)
                .d("NAME", "\"}Pi\"")
                .d("DISTILLERY_ID", "0")
                .d("AGE", "-15384")
                .d("ALCOHOL", "-0.45948737599937495")
                .d("VOLUME", "0")
                .d("PRICE", "1085.9518439937624")
                .d("DESCRIPTION", "\"UQWJkR3g\"")
                .d("AVAILABLE", "false")
            .and().insertInto("PRODUCT", 985L)
                .d("NAME", "\"50PD9daAzT\"")
                .d("DISTILLERY_ID", "0")
                .d("AGE", "492")
                .d("ALCOHOL", "-5237210.227841485")
                .d("VOLUME", "628")
                .d("PRICE", "1.1021851496092452")
                .d("DESCRIPTION", "\"_EM_5148_XYZ_\"")
                .d("AVAILABLE", "true")
            .and().insertInto("PRODUCT", 986L)
                .d("NAME", "\"BRJfY\"")
                .d("DISTILLERY_ID", "49")
                .d("AGE", "2000")
                .d("ALCOHOL", "0.0")
                .d("VOLUME", "825")
                .d("PRICE", "1191757.2242032224")
                .d("DESCRIPTION", "\"GfkGmXuCX0if_G3J\"")
                .d("AVAILABLE", "true")
            .and().insertInto("CART", 987L)
                .d("TOTAL_ITEMS", "815")
                .d("PRODUCTS_COST", "269")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("CART", 988L)
                .d("TOTAL_ITEMS", "4197292")
                .d("PRODUCTS_COST", "632")
                .d("DELIVERY_INCLUDED", "true")
            .and().insertInto("CART", 989L)
                .d("TOTAL_ITEMS", "279")
                .d("PRODUCTS_COST", "8570")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("DISTILLERY", 3296L)
                .d("TITLE", "\"_EM_10088_XYZ_\"")
                .d("REGION_ID", "4988")
                .d("DESCRIPTION", "NULL")
            .and().insertInto("DISTILLERY", 3297L)
                .d("TITLE", "\"I8gf69NniavmINH\"")
                .d("REGION_ID", "383")
                .d("DESCRIPTION", "\"GP73\"")
            .and().insertInto("DISTILLERY", 3298L)
                .d("TITLE", "NULL")
                .d("REGION_ID", "0")
                .d("DESCRIPTION", "NULL")
            .and().insertInto("DISTILLERY", 3299L)
                .d("TITLE", "\"_EM_10089_XYZ_\"")
                .d("REGION_ID", "NULL")
                .d("DESCRIPTION", "\"kNx3lA\"")
            .and().insertInto("DISTILLERY", 3300L)
                .d("TITLE", "\"eSwgcw1wz25kI\"")
                .d("REGION_ID", "NULL")
                .d("DESCRIPTION", "NULL")
            .and().insertInto("USER_ACCOUNT", 3301L)
                .d("EMAIL", "\"_EM_9985_XYZ_\"")
                .d("PASSWORD", "\"pTH\"")
                .d("NAME", "\"OC9h\"")
                .d("ACTIVE", "true")
            .and().insertInto("USER_ACCOUNT", 3302L)
                .d("EMAIL", "\"\"")
                .d("PASSWORD", "\"9ZJ6n5BLPD05_D\"")
                .d("NAME", "NULL")
                .d("ACTIVE", "true")
            .and().insertInto("USER_ACCOUNT", 3303L)
                .d("EMAIL", "\"g627as6B\"")
                .d("PASSWORD", "\"L2uuEUAf\"")
                .d("NAME", "\"Bz1pgMIL\"")
                .d("ACTIVE", "false")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/orders/0?name=_EM_2984_XYZ_")
                .then()
                .statusCode(500) // market/dto/assembler/OrderDtoAssembler_18_toModel
                .assertThat()
                .contentType("application/json")
                .body("'message'", nullValue())
                .body("'description'", containsString("uri=/customer/orders/0"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_9_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test @Timeout(60)
    public void test_9_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTACTS", 972L)
                .d("PHONE", "\"_EM_3230_XYZ_\"")
                .d("ADDRESS", "\"_EM_8094_XYZ_\"")
                .d("CITY_REGION", "\"eJ_oC\"")
            .and().insertInto("CONTACTS", 973L)
                .d("PHONE", "NULL")
                .d("ADDRESS", "\"Ta\"")
                .d("CITY_REGION", "\"_EM_8095_XYZ_\"")
            .and().insertInto("USER_ROLE", 974L)
                .d("USER_ID", "981")
                .d("ROLE_ID", "658")
            .and().insertInto("USER_ROLE", 975L)
                .d("USER_ID", "2097413")
                .d("ROLE_ID", "472")
            .and().insertInto("USER_ROLE", 976L)
                .d("USER_ID", "765")
                .d("ROLE_ID", "-125828396")
            .and().insertInto("USER_ROLE", 977L)
                .d("USER_ID", "5")
                .d("ROLE_ID", "262144")
            .and().insertInto("USER_ROLE", 978L)
                .d("USER_ID", "8389560")
                .d("ROLE_ID", "0")
            .and().insertInto("CUSTOMER_ORDER", 979L)
                .d("ID", "-523979")
                .d("USER_ACCOUNT_ID", "4")
                .d("DATE_CREATED", "\"1963-09-01\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "1024")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "2097811")
            .and().insertInto("CUSTOMER_ORDER", 980L)
                .d("ID", "1721")
                .d("USER_ACCOUNT_ID", "-2211037008098573397")
                .d("DATE_CREATED", "\"2001-06-25\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "502")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "478")
            .and().insertInto("CUSTOMER_ORDER", 981L)
                .d("ID", "-131071")
                .d("USER_ACCOUNT_ID", "0")
                .d("DATE_CREATED", "\"2067-05-30\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "330")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "2097813")
            .and().insertInto("CUSTOMER_ORDER", 982L)
                .d("ID", "33563415")
                .d("USER_ACCOUNT_ID", "0")
                .d("DATE_CREATED", "\"1993-10-31\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "781")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "0")
            .and().insertInto("PRODUCT", 998L)
                .d("NAME", "\"_EM_8096_XYZ_\"")
                .d("DISTILLERY_ID", "-2")
                .d("AGE", "735")
                .d("ALCOHOL", "0.923288")
                .d("VOLUME", "-130286")
                .d("PRICE", "0.2756708154744373")
                .d("DESCRIPTION", "\"D3AHIGg79\"")
                .d("AVAILABLE", "false")
            .and().insertInto("PRODUCT", 999L)
                .d("NAME", "\"e_Byeo\"")
                .d("DISTILLERY_ID", "838")
                .d("AGE", "826")
                .d("ALCOHOL", "0.0")
                .d("VOLUME", "66522")
                .d("PRICE", "-0.1624334161590985")
                .d("DESCRIPTION", "\"19LvFSEgjU\"")
                .d("AVAILABLE", "true")
            .and().insertInto("PRODUCT", 1000L)
                .d("NAME", "\"_EM_8097_XYZ_\"")
                .d("DISTILLERY_ID", "91")
                .d("AGE", "-15385")
                .d("ALCOHOL", "0.0")
                .d("VOLUME", "-1024")
                .d("PRICE", "0.0")
                .d("DESCRIPTION", "\"jkFQ\"")
                .d("AVAILABLE", "true")
            .and().insertInto("CART", 1001L)
                .d("TOTAL_ITEMS", "-1537317963")
                .d("PRODUCTS_COST", "4195830")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("DISTILLERY", 1147L)
                .d("TITLE", "\"FjFnjlXS4wR\"")
                .d("REGION_ID", "NULL")
                .d("DESCRIPTION", "\"_EM_4424_XYZ_\"")
            .and().insertInto("DISTILLERY", 1148L)
                .d("TITLE", "\"gkL16vcEXduN\"")
                .d("REGION_ID", "432")
                .d("DESCRIPTION", "\"_EM_4425_XYZ_\"")
            .and().insertInto("ORDERED_PRODUCT", 4025L)
                .d("CUSTOMER_ORDER_ID", "NULL")
                .d("PRODUCT_ID", "NULL")
                .d("QUANTITY", "909")
            .and().insertInto("ORDERED_PRODUCT", 4026L)
                .d("CUSTOMER_ORDER_ID", "521")
                .d("PRODUCT_ID", "NULL")
                .d("QUANTITY", "NULL")
            .and().insertInto("ORDERED_PRODUCT", 4027L)
                .d("CUSTOMER_ORDER_ID", "NULL")
                .d("PRODUCT_ID", "NULL")
                .d("QUANTITY", "37")
            .and().insertInto("BILL", 4028L)
                .d("NUMBER", "615")
                .d("DATE_CREATED", "\"2069-01-21\"")
                .d("TOTAL_COST", "707")
                .d("PAYED", "false")
                .d("CC_NUMBER", "\"KH7\"")
            .and().insertInto("BILL", 4029L)
                .d("NUMBER", "871")
                .d("DATE_CREATED", "NULL")
                .d("TOTAL_COST", "845")
                .d("PAYED", "false")
                .d("CC_NUMBER", "\"Ylzuj\"")
            .and().insertInto("BILL", 4030L)
                .d("NUMBER", "614")
                .d("DATE_CREATED", "\"2014-05-16\"")
                .d("TOTAL_COST", "301")
                .d("PAYED", "false")
                .d("CC_NUMBER", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/orders")
                .then()
                .statusCode(500) // market/dto/assembler/OrderDtoAssembler_18_toModel
                .assertThat()
                .contentType("application/json")
                .body("'message'", nullValue())
                .body("'description'", containsString("uri=/customer/orders"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }


}
