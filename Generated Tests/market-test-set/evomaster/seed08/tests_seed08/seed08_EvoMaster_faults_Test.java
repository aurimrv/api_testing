package em.embedded.market;
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-03T16:30:50.885-03:00[America/Araguaina]
 * <br>
 * The generated test suite contains 6 tests
 * <br>
 * Covered targets: 229
 * <br>
 * Used time: 1h 0m 5s
 * <br>
 * Needed budget for current results: 96%
 * <br>
 * This file contains test cases that are likely to indicate faults.
 */
public class seed08_EvoMaster_faults_Test {

    
    private static final SutHandler controller = new em.embedded.market.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("CONTACTS","CUSTOMER_ORDER"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * [test_0_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test @Timeout(60)
    public void test_0_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"_links\": [ " + 
                    " { " + 
                    " \"deprecation\": \"_EM_21_XYZ_\", " + 
                    " \"href\": \"_EM_22_XYZ_\", " + 
                    " \"hreflang\": \"_EM_23_XYZ_\", " + 
                    " \"profile\": \"_EM_26_XYZ_\", " + 
                    " \"rel\": { " + 
                    " \"_EM_27_XYZ_\": \"_EM_28_XYZ_\", " + 
                    " \"_EM_29_XYZ_\": \"_EM_30_XYZ_\", " + 
                    " \"_EM_31_XYZ_\": \"_EM_32_XYZ_\", " + 
                    " \"_EM_33_XYZ_\": \"_EM_34_XYZ_\", " + 
                    " \"_EM_35_XYZ_\": \"_EM_36_XYZ_\" " + 
                    " }, " + 
                    " \"title\": \"_EM_37_XYZ_\", " + 
                    " \"type\": \"_EM_38_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"deprecation\": \"_EM_39_XYZ_\", " + 
                    " \"href\": \"_EM_40_XYZ_\", " + 
                    " \"hreflang\": \"_EM_41_XYZ_\", " + 
                    " \"media\": \"_EM_42_XYZ_\", " + 
                    " \"name\": \"_EM_43_XYZ_\", " + 
                    " \"profile\": \"_EM_44_XYZ_\", " + 
                    " \"rel\": { " + 
                    " \"_EM_45_XYZ_\": \"_EM_46_XYZ_\", " + 
                    " \"_EM_47_XYZ_\": \"_EM_48_XYZ_\", " + 
                    " \"_EM_49_XYZ_\": \"_EM_50_XYZ_\", " + 
                    " \"_EM_51_XYZ_\": \"_EM_52_XYZ_\", " + 
                    " \"_EM_53_XYZ_\": \"_EM_54_XYZ_\" " + 
                    " } " + 
                    " }, " + 
                    " { " + 
                    " \"name\": \"2OYUphbBZarIA\", " + 
                    " \"rel\": { " + 
                    " \"_EM_61_XYZ_\": \"_EM_62_XYZ_\", " + 
                    " \"_EM_63_XYZ_\": \"_EM_64_XYZ_\", " + 
                    " \"_EM_65_XYZ_\": \"_EM_66_XYZ_\", " + 
                    " \"_EM_67_XYZ_\": \"_EM_68_XYZ_\" " + 
                    " }, " + 
                    " \"title\": \"_EM_69_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"media\": \"_EM_73_XYZ_\", " + 
                    " \"name\": \"_EM_74_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"deprecation\": \"_EM_87_XYZ_\", " + 
                    " \"media\": \"_EM_90_XYZ_\", " + 
                    " \"profile\": \"_EM_92_XYZ_\", " + 
                    " \"type\": \"_EM_104_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"address\": \"_EM_105_XYZ_\", " + 
                    " \"name\": \" p\", " + 
                    " \"password\": \"2H\", " + 
                    " \"phone\": \"_postfix\" " + 
                    " } ")
                .post(baseUrlOfSut + "/register?EMextraParam123=_EM_107_XYZ_")
                .then()
                .statusCode(500) // market/rest/exception/RestErrorResponse_50_getFieldErrors
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("JSON parse error: Expected relation name; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Expected relation name\n at [Source: (ByteArrayInputStream); line: 1, column: 13] (through reference chain: market.dto.UserDTO[\"_links\"])"))
                .body("'description'", containsString("uri=/register"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_1_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test @Timeout(60)
    public void test_1_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"_links\": [ " + 
                    " { " + 
                    " \"hreflang\": \"_EM_171_XYZ_\", " + 
                    " \"name\": \"_EM_173_XYZ_\", " + 
                    " \"rel\": { " + 
                    " \"EwsRXrVJnkfm\": \"_EM_175_XYZ_\", " + 
                    " \"_EM_176_XYZ_\": \"_EM_177_XYZ_\", " + 
                    " \"_EM_178_XYZ_\": \"_EM_179_XYZ_\", " + 
                    " \"_EM_180_XYZ_\": \"_EM_181_XYZ_\" " + 
                    " } " + 
                    " }, " + 
                    " { " + 
                    " \"href\": \"_EM_185_XYZ_\", " + 
                    " \"media\": \"_EM_187_XYZ_\", " + 
                    " \"name\": \"_EM_188_XYZ_\", " + 
                    " \"title\": \"_EM_198_XYZ_\", " + 
                    " \"type\": \"_EM_199_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"phone\": \"\" " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/contacts?" + 
                    "name=_EM_168_XYZ_&" + 
                    "EMextraParam123=_EM_200_XYZ_")
                .then()
                .statusCode(500) // market/rest/exception/RestErrorResponse_50_getFieldErrors
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("JSON parse error: Expected relation name; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Expected relation name\n at [Source: (ByteArrayInputStream); line: 1, column: 13] (through reference chain: market.dto.ContactsDTO[\"_links\"])"))
                .body("'description'", containsString("uri=/customer/contacts"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_2_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test @Timeout(60)
    public void test_2_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "_EM_273_XYZ_")
                .get(baseUrlOfSut + "/customer/contacts?EMextraParam123=_EM_272_XYZ_")
                .then()
                .statusCode(500) // market/dto/assembler/ContactsDtoAssembler_12_toModel
                .assertThat()
                .contentType("application/json")
                .body("'message'", nullValue())
                .body("'description'", containsString("uri=/customer/contacts"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_3_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test @Timeout(60)
    public void test_3_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "_EM_539_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"_links\": [ " + 
                    " { " + 
                    " \"href\": \"qPwwCaEa5jnlw\", " + 
                    " \"media\": \"_EM_502_XYZ_\", " + 
                    " \"rel\": {}, " + 
                    " \"type\": \"_EM_506_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"deprecation\": \"_EM_507_XYZ_\", " + 
                    " \"href\": \"_EM_508_XYZ_\", " + 
                    " \"media\": \"_EM_510_XYZ_\", " + 
                    " \"title\": \"w\" " + 
                    " }, " + 
                    " { " + 
                    " \"deprecation\": \"_EM_521_XYZ_\", " + 
                    " \"media\": \"_EM_524_XYZ_\", " + 
                    " \"type\": \"dhh\" " + 
                    " }, " + 
                    " { " + 
                    " \"deprecation\": \"_EM_533_XYZ_\", " + 
                    " \"href\": \"mm7NevCG\", " + 
                    " \"name\": \"_EM_536_XYZ_\", " + 
                    " \"profile\": \"_EM_537_XYZ_\", " + 
                    " \"type\": \"IX0F4zto1H\" " + 
                    " } " + 
                    " ] " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/cart?EMextraParam123=_EM_538_XYZ_")
                .then()
                .statusCode(500) // market/rest/exception/RestErrorResponse_50_getFieldErrors
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("JSON parse error: Expected relation name; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Expected relation name\n at [Source: (ByteArrayInputStream); line: 1, column: 13] (through reference chain: market.dto.CartItemDTO[\"_links\"])"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_4_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test @Timeout(60)
    public void test_4_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "42")
                .get(baseUrlOfSut + "/customer?" + 
                    "name=_EM_279_XYZ_&" + 
                    "EMextraParam123=_EM_280_XYZ_")
                .then()
                .statusCode(500) // market/dto/assembler/UserAccountDtoAssembler_16_toModel
                .assertThat()
                .contentType("application/json")
                .body("'message'", nullValue())
                .body("'description'", containsString("uri=/customer"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_5_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test @Timeout(60)
    public void test_5_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTACTS", 424L)
                .d("PHONE", "NULL")
                .d("ADDRESS", "\"\"")
                .d("CITY_REGION", "\"lurEZSMgx\"")
            .and().insertInto("CUSTOMER_ORDER", 10007L)
                .d("ID", "817")
                .d("USER_ACCOUNT_ID", "NULL")
                .d("DATE_CREATED", "\"2068-01-11\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "564")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "792")
            .and().insertInto("CUSTOMER_ORDER", 10008L)
                .d("ID", "475")
                .d("USER_ACCOUNT_ID", "370")
                .d("DATE_CREATED", "\"1981-06-08\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "154")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "736")
            .and().insertInto("CUSTOMER_ORDER", 10009L)
                .d("ID", "405")
                .d("USER_ACCOUNT_ID", "NULL")
                .d("DATE_CREATED", "NULL")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "43")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "145")
            .and().insertInto("CUSTOMER_ORDER", 10010L)
                .d("ID", "539")
                .d("USER_ACCOUNT_ID", "NULL")
                .d("DATE_CREATED", "NULL")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "-1151786527")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "712")
            .and().insertInto("CUSTOMER_ORDER", 10011L)
                .d("ID", "296")
                .d("USER_ACCOUNT_ID", "NULL")
                .d("DATE_CREATED", "\"2062-06-25\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "58")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "548")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/orders/817?included=GiWSjNQgoRsGsjWL5")
                .then()
                .statusCode(500) // market/dto/assembler/OrderDtoAssembler_17_toModel
                .assertThat()
                .contentType("application/json")
                .body("'message'", nullValue())
                .body("'description'", containsString("uri=/customer/orders/817"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }


}
