package em.embedded.market;
import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-03T17:36:05.973-03:00[America/Araguaina]
 * <br>
 * The generated test suite contains 7 tests
 * <br>
 * Covered targets: 237
 * <br>
 * Used time: 1h 0m 5s
 * <br>
 * Needed budget for current results: 82%
 * <br>
 * This file contains test cases that are likely to indicate faults.
 */
public class seed09_EvoMaster_faults_Test {

    
    private static final SutHandler controller = new em.embedded.market.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("CONTACTS","CUSTOMER_ORDER","USER_ROLE","CART","PRODUCT","CART_ITEM","USER_ACCOUNT"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    /**
    * [test_0_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test @Timeout(60)
    public void test_0_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"_links\": [ " + 
                    " { " + 
                    " \"hreflang\": \"_EM_65_XYZ_\", " + 
                    " \"name\": \"_EM_67_XYZ_\", " + 
                    " \"profile\": \"_EM_68_XYZ_\", " + 
                    " \"type\": \"_EM_80_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"hreflang\": \"sM\", " + 
                    " \"profile\": \"_EM_85_XYZ_\", " + 
                    " \"rel\": { " + 
                    " \"_EM_86_XYZ_\": \"XJA2vRwEaSZ\", " + 
                    " \"_EM_87_XYZ_\": \"_EM_88_XYZ_\" " + 
                    " }, " + 
                    " \"type\": \"_EM_90_XYZ_\" " + 
                    " }, " + 
                    " { " + 
                    " \"href\": \"_EM_92_XYZ_\", " + 
                    " \"profile\": \"_EM_95_XYZ_\", " + 
                    " \"rel\": { " + 
                    " \"_EM_96_XYZ_\": \"QQ\", " + 
                    " \"_EM_97_XYZ_\": \"_EM_98_XYZ_\", " + 
                    " \"_EM_99_XYZ_\": \"_EM_100_XYZ_\", " + 
                    " \"_EM_101_XYZ_\": \"_EM_102_XYZ_\", " + 
                    " \"_EM_103_XYZ_\": \"_EM_104_XYZ_\" " + 
                    " }, " + 
                    " \"title\": \"_EM_105_XYZ_\" " + 
                    " } " + 
                    " ], " + 
                    " \"productId\": 314, " + 
                    " \"quantity\": 391 " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/cart")
                .then()
                .statusCode(500) // market/rest/exception/RestErrorResponse_50_getFieldErrors
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("JSON parse error: Expected relation name; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Expected relation name\n at [Source: (ByteArrayInputStream); line: 1, column: 13] (through reference chain: market.dto.CartItemDTO[\"_links\"])"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_1_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test @Timeout(60)
    public void test_1_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USER_ROLE", 2122L)
                .d("USER_ID", "128")
                .d("ROLE_ID", "-262144")
            .and().insertInto("USER_ROLE", 2123L)
                .d("USER_ID", "1040812")
                .d("ROLE_ID", "1540")
            .and().insertInto("USER_ROLE", 2124L)
                .d("USER_ID", "-32")
                .d("ROLE_ID", "-7685")
            .and().insertInto("USER_ROLE", 2125L)
                .d("USER_ID", "293")
                .d("ROLE_ID", "-480243951")
            .and().insertInto("CART", 2126L)
                .d("TOTAL_ITEMS", "NULL")
                .d("PRODUCTS_COST", "2141")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("CART", 2127L)
                .d("TOTAL_ITEMS", "476")
                .d("PRODUCTS_COST", "754")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("CART", 2128L)
                .d("TOTAL_ITEMS", "978")
                .d("PRODUCTS_COST", "2048")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("CART", 2129L)
                .d("TOTAL_ITEMS", "NULL")
                .d("PRODUCTS_COST", "695")
                .d("DELIVERY_INCLUDED", "true")
            .and().insertInto("CART", 2130L)
                .d("TOTAL_ITEMS", "417")
                .d("PRODUCTS_COST", "538")
                .d("DELIVERY_INCLUDED", "true")
            .and().insertInto("CONTACTS", 2131L)
                .d("PHONE", "\"MC0R4a2UKG\"")
                .d("ADDRESS", "\"_EM_8810_XYZ_\"")
                .d("CITY_REGION", "\"yQ27z\"")
            .and().insertInto("PRODUCT", 2132L)
                .d("NAME", "\"_EM_8812_XYZ_\"")
                .d("DISTILLERY_ID", "932")
                .d("AGE", "402")
                .d("ALCOHOL", "0.7946381786547164")
                .d("VOLUME", "0")
                .d("PRICE", "0.7393226290642527")
                .d("DESCRIPTION", "\"_EM_13663_XYZ_\"")
                .d("AVAILABLE", "false")
            .and().insertInto("PRODUCT", 2133L)
                .d("NAME", "\"S4L\"")
                .d("DISTILLERY_ID", "125")
                .d("AGE", "226")
                .d("ALCOHOL", "0.9414787768209045")
                .d("VOLUME", "879")
                .d("PRICE", "0.1749770312426441")
                .d("DESCRIPTION", "\"g5UZrubUvUKU\"")
                .d("AVAILABLE", "false")
            .and().insertInto("PRODUCT", 2134L)
                .d("NAME", "\"_EM_14245_XYZ_\"")
                .d("DISTILLERY_ID", "8")
                .d("AGE", "750")
                .d("ALCOHOL", "0.4229723912003851")
                .d("VOLUME", "21")
                .d("PRICE", "0.1944682")
                .d("DESCRIPTION", "\"tntbO88W99eoI\"")
                .d("AVAILABLE", "false")
            .and().insertInto("CART_ITEM", 2135L)
                .d("CART_ID", "2093")
                .d("PRODUCT_ID", "0")
                .d("QUANTITY", "157")
            .and().insertInto("CUSTOMER_ORDER", 2187L)
                .d("ID", "464")
                .d("USER_ACCOUNT_ID", "-30884")
                .d("DATE_CREATED", "\"2060-08-01\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "66349")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "-4")
            .and().insertInto("CUSTOMER_ORDER", 2188L)
                .d("ID", "466")
                .d("USER_ACCOUNT_ID", "6137023226911814145")
                .d("DATE_CREATED", "\"2055-12-11\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "646")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "8379")
            .and().insertInto("CUSTOMER_ORDER", 2189L)
                .d("ID", "0")
                .d("USER_ACCOUNT_ID", "-7551")
                .d("DATE_CREATED", "\"2053-01-01\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "1049533")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "880")
            .and().insertInto("CUSTOMER_ORDER", 2190L)
                .d("ID", "-3565")
                .d("USER_ACCOUNT_ID", "3498331877757893148")
                .d("DATE_CREATED", "\"1998-03-01\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "902")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "4")
            .and().insertInto("CUSTOMER_ORDER", 2191L)
                .d("ID", "-16776958")
                .d("USER_ACCOUNT_ID", "-130371")
                .d("DATE_CREATED", "\"1953-03-21\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "8624")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "0")
            .and().insertInto("USER_ACCOUNT", 5421L)
                .d("EMAIL", "\"_EM_16008_XYZ_\"")
                .d("PASSWORD", "\"Z9DKba2Gi_mHv\"")
                .d("NAME", "NULL")
                .d("ACTIVE", "false")
            .and().insertInto("USER_ACCOUNT", 5422L)
                .d("EMAIL", "\"yxg\"")
                .d("PASSWORD", "\"A5Ih6C8\"")
                .d("NAME", "\"\"")
                .d("ACTIVE", "false")
            .and().insertInto("USER_ACCOUNT", 5423L)
                .d("EMAIL", "NULL")
                .d("PASSWORD", "\"9hef74\"")
                .d("NAME", "NULL")
                .d("ACTIVE", "false")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"_links\": [ " + 
                    " { " + 
                    " \"deprecation\": \"m78o3pc\", " + 
                    " \"media\": \"GlXDvwJsNb\", " + 
                    " \"name\": \"ba0QX\", " + 
                    " \"rel\": { " + 
                    " \"yxUI4E37xFxAZLg6\": \"sC9KQfkirW9Lg\", " + 
                    " \"jCVIzQaw\": \"VfrVJ7pyQ4UC\" " + 
                    " }, " + 
                    " \"title\": \"mCOkqxj\", " + 
                    " \"type\": \"SBTBnR2sI8\" " + 
                    " }, " + 
                    " { " + 
                    " \"deprecation\": \"F90WV8xmTLE3Zd\", " + 
                    " \"href\": \"zpn6NpTwx6S\", " + 
                    " \"media\": \"Qev0xoFSoHB8rygn\", " + 
                    " \"name\": \"ZfNsavvp_nwDLS\", " + 
                    " \"profile\": \"\", " + 
                    " \"rel\": { " + 
                    " \"AVDxsGnHDw9HpU5\": \"eg\", " + 
                    " \"yca\": \"5RhEdlomR\", " + 
                    " \"Zl4KDqxWmEd5I\": \"\", " + 
                    " \"1BDuewLPIujB26NP\": \"INhtjo\", " + 
                    " \"\": \"\" " + 
                    " } " + 
                    " }, " + 
                    " { " + 
                    " \"deprecation\": \"k8BniABAvr1YY\", " + 
                    " \"media\": \"MFcNMO2\", " + 
                    " \"profile\": \"bkrrVUvu2q\", " + 
                    " \"title\": \"zNvvv1c\" " + 
                    " }, " + 
                    " { " + 
                    " \"deprecation\": \"9uHuVjWeFR3\", " + 
                    " \"href\": \"wtf2499XXbD\", " + 
                    " \"hreflang\": \"_OLXPwTTRJB\", " + 
                    " \"type\": \"n40w\" " + 
                    " }, " + 
                    " { " + 
                    " \"deprecation\": \"yYAVGl\", " + 
                    " \"hreflang\": \"lZZ\", " + 
                    " \"rel\": { " + 
                    " \"wZUElQJ7dYrguFT\": \"sKMeY0WZVSg_Jtxs\", " + 
                    " \"yFl9hvpNc1\": \"cItrLvPi4SK\" " + 
                    " }, " + 
                    " \"title\": \"VuwNaW8gZ\", " + 
                    " \"type\": \"nGsYwJBShbUBhk\" " + 
                    " } " + 
                    " ], " + 
                    " \"phone\": \"\" " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/contacts")
                .then()
                .statusCode(500) // market/rest/exception/RestErrorResponse_50_getFieldErrors
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("JSON parse error: Expected relation name; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Expected relation name\n at [Source: (ByteArrayInputStream); line: 1, column: 13] (through reference chain: market.dto.ContactsDTO[\"_links\"])"))
                .body("'description'", containsString("uri=/customer/contacts"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_2_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test @Timeout(60)
    public void test_2_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/contacts")
                .then()
                .statusCode(500) // market/dto/assembler/ContactsDtoAssembler_12_toModel
                .assertThat()
                .contentType("application/json")
                .body("'message'", nullValue())
                .body("'description'", containsString("uri=/customer/contacts"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_3_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test @Timeout(60)
    public void test_3_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "_EM_507_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"_links\": [], " + 
                    " \"address\": \"_EM_504_XYZ_\", " + 
                    " \"name\": \" L\", " + 
                    " \"password\": \"3s\" " + 
                    " } ")
                .post(baseUrlOfSut + "/register")
                .then()
                .statusCode(500) // market/rest/exception/RestErrorResponse_50_getFieldErrors
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("JSON parse error: Expected relation name; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Expected relation name\n at [Source: (ByteArrayInputStream); line: 1, column: 13] (through reference chain: market.dto.UserDTO[\"_links\"])"))
                .body("'description'", containsString("uri=/register"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_4_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_1
    * LastLine_0
    */
    @Test @Timeout(60)
    public void test_4_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("PRODUCT", 3824L)
                .d("NAME", "\"fErzcf3kS\"")
                .d("DISTILLERY_ID", "772")
                .d("AGE", "NULL")
                .d("ALCOHOL", "0.7960436836906115")
                .d("VOLUME", "915")
                .d("PRICE", "0.3052680260775923")
                .d("DESCRIPTION", "NULL")
                .d("AVAILABLE", "false")
            .and().insertInto("CUSTOMER_ORDER", 3825L)
                .d("ID", "-1276301732")
                .d("USER_ACCOUNT_ID", "990")
                .d("DATE_CREATED", "\"2073-11-09\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "566")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "137")
            .and().insertInto("CART", 3826L)
                .d("TOTAL_ITEMS", "879")
                .d("PRODUCTS_COST", "NULL")
                .d("DELIVERY_INCLUDED", "false")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/products?included=t7")
                .then()
                .statusCode(500) // market/service/impl/ProductServiceImpl_35_findAll
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Unable to find market.domain.Distillery with id 772; nested exception is javax.persistence.EntityNotFoundException: Unable to find market.domain.Distillery with id 772"))
                .body("'description'", containsString("uri=/products"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_5_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test @Timeout(60)
    public void test_5_with500() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer?" + 
                    "name=_EM_259_XYZ_&" + 
                    "EMextraParam123=_EM_260_XYZ_")
                .then()
                .statusCode(500) // market/dto/assembler/UserAccountDtoAssembler_16_toModel
                .assertThat()
                .contentType("application/json")
                .body("'message'", nullValue())
                .body("'description'", containsString("uri=/customer"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    /**
    * [test_6_with500] is a part of 1 or more clusters, as defined by the selected clustering options. 
    * ErrorText_0
    * LastLine_0
    */
    @Test @Timeout(60)
    public void test_6_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTACTS", 3326L)
                .d("PHONE", "\"kqFjN7E0tliWLpom\"")
                .d("ADDRESS", "NULL")
                .d("CITY_REGION", "\"BdDO9o\"")
            .and().insertInto("CONTACTS", 3327L)
                .d("PHONE", "NULL")
                .d("ADDRESS", "NULL")
                .d("CITY_REGION", "NULL")
            .and().insertInto("CUSTOMER_ORDER", 9450L)
                .d("ID", "0")
                .d("USER_ACCOUNT_ID", "NULL")
                .d("DATE_CREATED", "NULL")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "698")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "910")
            .and().insertInto("CUSTOMER_ORDER", 9451L)
                .d("ID", "457")
                .d("USER_ACCOUNT_ID", "551")
                .d("DATE_CREATED", "\"2017-09-09\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "571")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "328")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/orders/0?included=3vPVr5RsdUj")
                .then()
                .statusCode(500) // market/dto/assembler/OrderDtoAssembler_17_toModel
                .assertThat()
                .contentType("application/json")
                .body("'message'", nullValue())
                .body("'description'", containsString("uri=/customer/orders/0"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 401, 403, 404).contains(res_0.extract().statusCode()));
    }


}
