package market;

import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-02T19:35:15.229-03:00[America/Araguaina]
 * <br>
 * The generated test suite contains 17 tests
 * <br>
 * Covered targets: 327
 * <br>
 * Used time: 1h 0m 7s
 * <br>
 * Needed budget for current results: 83%
 * <br>
 * This file contains test cases that represent failed calls, but not indicative of faults.
 */
public class seed04_EvoMaster_others_Test {

    
    private static final SutHandler controller = new em.embedded.market.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("CUSTOMER_ORDER","CART","CONTACTS","USER_ROLE","PRODUCT","ORDERED_PRODUCT","BILL"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test @Timeout(60)
    public void test_0() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer?name=_EM_15_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'message'", containsString(""))
                .body("'path'", containsString("/customer"));
        
    }
    
    
    @Test @Timeout(60)
    public void test_1() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTACTS", 653L)
                .d("PHONE", "\"_EM_4277_XYZ_\"")
                .d("ADDRESS", "\"_EM_4278_XYZ_\"")
                .d("CITY_REGION", "\"P\"")
            .and().insertInto("CONTACTS", 654L)
                .d("PHONE", "\"_EM_4279_XYZ_\"")
                .d("ADDRESS", "\"ABr71U\"")
                .d("CITY_REGION", "\"_EM_4280_XYZ_\"")
            .and().insertInto("CART", 863L)
                .d("TOTAL_ITEMS", "NULL")
                .d("PRODUCTS_COST", "993")
                .d("DELIVERY_INCLUDED", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"Z0j8Lxt_xL42\", " + 
                    " \"email\": \"OUAer0rgW1kGUg\", " + 
                    " \"name\": \"- L\", " + 
                    " \"password\": \"RX\" " + 
                    " } ")
                .post(baseUrlOfSut + "/register")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(401.0))
                .body("'error'", containsString("Unauthorized"))
                .body("'message'", containsString(""))
                .body("'path'", containsString("/register"));
        
    }
    
    
    @Test @Timeout(60)
    public void test_2() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/orders/703?" + 
                    "name=_EM_0_XYZ_&" + 
                    "EMextraParam123=_EM_1_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Acesso negado"))
                .body("'description'", containsString("uri=/customer/orders/703"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
    }
    
    
    @Test @Timeout(60)
    public void test_3() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/cart?name=_EM_3_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Acesso negado"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
    }
    
    
    @Test @Timeout(60)
    public void test_4() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/customer/cart?EMextraParam123=_EM_6_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Acesso negado"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
    }
    
    
    @Test @Timeout(60)
    public void test_5() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/contacts?EMextraParam123=_EM_9_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Acesso negado"))
                .body("'description'", containsString("uri=/customer/contacts"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
    }
    
    
    @Test @Timeout(60)
    public void test_6() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_12_XYZ_")
                .get(baseUrlOfSut + "/customer/orders?EMextraParam123=_EM_11_XYZ_")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Acesso negado"))
                .body("'description'", containsString("uri=/customer/orders"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
    }
    
    
    @Test @Timeout(60)
    public void test_7() throws Exception {
        
        given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_28_XYZ_")
                .put(baseUrlOfSut + "/customer/cart/delivery?" + 
                    "included=true&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(401)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Acesso negado"))
                .body("'description'", containsString("uri=/customer/cart/delivery"))
                .body("'entityName'", nullValue())
                .body("'fieldErrors'.size()", equalTo(0));
        
    }
    
    
    @Test @Timeout(60)
    public void test_8() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CUSTOMER_ORDER", 175L)
                .d("ID", "8389410")
                .d("USER_ACCOUNT_ID", "16")
                .d("DATE_CREATED", "\"2000-06-16\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "0")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "5058")
            .and().insertInto("CUSTOMER_ORDER", 176L)
                .d("ID", "9071")
                .d("USER_ACCOUNT_ID", "16")
                .d("DATE_CREATED", "\"2088-01-03\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "16384")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "99")
            .and().insertInto("CUSTOMER_ORDER", 177L)
                .d("ID", "0")
                .d("USER_ACCOUNT_ID", "380")
                .d("DATE_CREATED", "\"2077-02-22\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "-8387705")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "0")
            .and().insertInto("CUSTOMER_ORDER", 178L)
                .d("ID", "-33555974")
                .d("USER_ACCOUNT_ID", "1")
                .d("DATE_CREATED", "\"1961-11-16\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "0")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "-4096")
            .and().insertInto("CART", 179L)
                .d("TOTAL_ITEMS", "-5")
                .d("PRODUCTS_COST", "2064460")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("CART", 180L)
                .d("TOTAL_ITEMS", "120")
                .d("PRODUCTS_COST", "0")
                .d("DELIVERY_INCLUDED", "true")
            .and().insertInto("CONTACTS", 181L)
                .d("PHONE", "\"vX0Z3BUE9Y\"")
                .d("ADDRESS", "\"_EM_2801_XYZ_\"")
                .d("CITY_REGION", "\"2JJ\"")
            .and().insertInto("CONTACTS", 182L)
                .d("PHONE", "\"9T\"")
                .d("ADDRESS", "NULL")
                .d("CITY_REGION", "\"_EM_3268_XYZ_\"")
            .and().insertInto("CONTACTS", 183L)
                .d("PHONE", "\"P\"")
                .d("ADDRESS", "\"U_V7y1\"")
                .d("CITY_REGION", "\"2088-01-03\"")
            .and().insertInto("CONTACTS", 184L)
                .d("PHONE", "\"l\"")
                .d("ADDRESS", "\"oHV\"")
                .d("CITY_REGION", "\"_EM_2803_XYZ_\"")
            .and().insertInto("CONTACTS", 185L)
                .d("PHONE", "\"imUwh\"")
                .d("ADDRESS", "\"IIhBc\"")
                .d("CITY_REGION", "\"_EM_3269_XYZ_\"")
            .and().insertInto("USER_ROLE", 186L)
                .d("USER_ID", "-241772589")
                .d("ROLE_ID", "2098077")
            .and().insertInto("USER_ROLE", 187L)
                .d("USER_ID", "65536")
                .d("ROLE_ID", "8385332")
            .and().insertInto("USER_ROLE", 188L)
                .d("USER_ID", "0")
                .d("ROLE_ID", "3351779571330670779")
            .and().insertInto("PRODUCT", 204L)
                .d("NAME", "\"_EM_3270_XYZ_\"")
                .d("DISTILLERY_ID", "0")
                .d("AGE", "109")
                .d("ALCOHOL", "0.0")
                .d("VOLUME", "-268434514")
                .d("PRICE", "0.0")
                .d("DESCRIPTION", "\"_EM_3271_XYZ_K\"")
                .d("AVAILABLE", "true")
            .and().insertInto("ORDERED_PRODUCT", 2018L)
                .d("CUSTOMER_ORDER_ID", "239")
                .d("PRODUCT_ID", "5160044205169999468")
                .d("QUANTITY", "446")
            .and().insertInto("ORDERED_PRODUCT", 2019L)
                .d("CUSTOMER_ORDER_ID", "-2096207")
                .d("PRODUCT_ID", "NULL")
                .d("QUANTITY", "150")
            .and().insertInto("BILL", 2020L)
                .d("NUMBER", "212")
                .d("DATE_CREATED", "NULL")
                .d("TOTAL_COST", "791")
                .d("PAYED", "false")
                .d("CC_NUMBER", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/products/2841")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Requested entity doesn't exist"))
                .body("'description'", containsString("uri=/products/2841"))
                .body("'entityName'", containsString("ProductDTO"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("id"))
                .body("'fieldErrors'[0].'message'", containsString("No instance with this id"));
        
    }
    
    
    @Test @Timeout(60)
    public void test_9() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "_EM_237_XYZ_")
                .get(baseUrlOfSut + "/customer/orders/188?" + 
                    "name=_EM_235_XYZ_&" + 
                    "EMextraParam123=_EM_236_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Requested entity doesn't exist"))
                .body("'description'", containsString("uri=/customer/orders/188"))
                .body("'entityName'", containsString("OrderDTO"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("id"))
                .body("'fieldErrors'[0].'message'", containsString("No instance with this id"));
        
    }
    
    
    @Test @Timeout(60)
    public void test_10() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "_EM_694_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"productId\": 414, " + 
                    " \"quantity\": 318 " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/cart?" + 
                    "name=bcbv7jfO&" + 
                    "EMextraParam123=_EM_693_XYZ_")
                .then()
                .statusCode(404)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Requested entity doesn't exist"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", containsString("Product"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("id"))
                .body("'fieldErrors'[0].'message'", containsString("No instance with this id"));
        
    }
    
    
    @Test @Timeout(60)
    public void test_11() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_83_XYZ_")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"_EM_81_XYZ_\" " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/contacts?" + 
                    "name=YjzvKidz8LmZ&" + 
                    "EMextraParam123=_EM_82_XYZ_")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/customer/contacts"))
                .body("'entityName'", containsString("contactsDTO"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("phone"))
                .body("'fieldErrors'[0].'message'", containsString("The value shall not be empty"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_12() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTACTS", 1077L)
                .d("PHONE", "NULL")
                .d("ADDRESS", "\"kUgANtb1T9FGu3Z\"")
                .d("CITY_REGION", "NULL")
            .and().insertInto("CONTACTS", 1078L)
                .d("PHONE", "NULL")
                .d("ADDRESS", "\"2Mt\"")
                .d("CITY_REGION", "\"Wm\"")
            .and().insertInto("CONTACTS", 1079L)
                .d("PHONE", "\"\"")
                .d("ADDRESS", "\"Z4r\"")
                .d("CITY_REGION", "\"v7H\"")
            .and().insertInto("CART", 8027L)
                .d("TOTAL_ITEMS", "286")
                .d("PRODUCTS_COST", "796292659")
                .d("DELIVERY_INCLUDED", "true")
            .and().insertInto("CART", 8028L)
                .d("TOTAL_ITEMS", "429")
                .d("PRODUCTS_COST", "398")
                .d("DELIVERY_INCLUDED", "true")
            .and().insertInto("CART", 8029L)
                .d("TOTAL_ITEMS", "603")
                .d("PRODUCTS_COST", "622")
                .d("DELIVERY_INCLUDED", "true")
            .and().insertInto("CART", 8030L)
                .d("TOTAL_ITEMS", "NULL")
                .d("PRODUCTS_COST", "814")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("CART", 8031L)
                .d("TOTAL_ITEMS", "NULL")
                .d("PRODUCTS_COST", "NULL")
                .d("DELIVERY_INCLUDED", "true")
            .and().insertInto("CUSTOMER_ORDER", 8044L)
                .d("ID", "610")
                .d("USER_ACCOUNT_ID", "-4020971392479202558")
                .d("DATE_CREATED", "NULL")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "311")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "-1985492739")
            .and().insertInto("CUSTOMER_ORDER", 8045L)
                .d("ID", "173")
                .d("USER_ACCOUNT_ID", "5826123394203104601")
                .d("DATE_CREATED", "\"2067-08-12\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "316")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "864")
            .and().insertInto("CUSTOMER_ORDER", 8046L)
                .d("ID", "854")
                .d("USER_ACCOUNT_ID", "NULL")
                .d("DATE_CREATED", "\"2095-01-01\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "580")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "403")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"ccNumber\": \"_postfix\" " + 
                    " } ")
                .post(baseUrlOfSut + "/customer/cart/pay?" + 
                    "name=&" + 
                    "EMextraParam123=42")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/customer/cart/pay"))
                .body("'entityName'", containsString("creditCardDTO"))
                .body("'fieldErrors'.size()", equalTo(2))
                .body("'fieldErrors'[0].'field'", containsString("ccNumber"))
                .body("'fieldErrors'[0].'message'", containsString("Not a valid credit card number"))
                .body("'fieldErrors'[1].'field'", containsString("ccNumber"))
                .body("'fieldErrors'[1].'message'", containsString("Card number shall consist of 13-16 digits"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_13() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTACTS", 653L)
                .d("PHONE", "\"_EM_4277_XYZ_\"")
                .d("ADDRESS", "\"_EM_4278_XYZ_\"")
                .d("CITY_REGION", "\"P\"")
            .and().insertInto("CONTACTS", 654L)
                .d("PHONE", "\"_EM_4279_XYZ_\"")
                .d("ADDRESS", "\"ABr71U\"")
                .d("CITY_REGION", "\"_EM_4280_XYZ_\"")
            .and().insertInto("CART", 863L)
                .d("TOTAL_ITEMS", "NULL")
                .d("PRODUCTS_COST", "993")
                .d("DELIVERY_INCLUDED", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"Z0j8Lxt_xL42\", " + 
                    " \"name\": \"- L\", " + 
                    " \"password\": \"RX\", " + 
                    " \"phone\": \"\" " + 
                    " } ")
                .post(baseUrlOfSut + "/register")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/register"))
                .body("'entityName'", containsString("userDTO"))
                .body("'fieldErrors'.size()", equalTo(4))
                .body("'fieldErrors'[0].'field'", containsString("email"))
                .body("'fieldErrors'[0].'message'", containsString("The value shall not be empty"))
                .body("'fieldErrors'[1].'field'", containsString("phone"))
                .body("'fieldErrors'[1].'message'", containsString("Shall consist of a + sign, a country code, a region code (1-4 digits), and a number (6-7 digits)"))
                .body("'fieldErrors'[2].'field'", containsString("password"))
                .body("'fieldErrors'[2].'message'", containsString("Length shall be between 6 and 50 characters"))
                ; // Skipping assertions on the remaining 1 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_14() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CONTACTS", 1077L)
                .d("PHONE", "NULL")
                .d("ADDRESS", "\"kUgANtb1T9FGu3Z\"")
                .d("CITY_REGION", "NULL")
            .and().insertInto("CONTACTS", 1078L)
                .d("PHONE", "NULL")
                .d("ADDRESS", "\"2Mt\"")
                .d("CITY_REGION", "\"Wm\"")
            .and().insertInto("CONTACTS", 1079L)
                .d("PHONE", "\"\"")
                .d("ADDRESS", "\"Z4r\"")
                .d("CITY_REGION", "\"v7H\"")
            .and().insertInto("CART", 8027L)
                .d("TOTAL_ITEMS", "286")
                .d("PRODUCTS_COST", "796292659")
                .d("DELIVERY_INCLUDED", "true")
            .and().insertInto("CART", 8028L)
                .d("TOTAL_ITEMS", "429")
                .d("PRODUCTS_COST", "398")
                .d("DELIVERY_INCLUDED", "true")
            .and().insertInto("CART", 8029L)
                .d("TOTAL_ITEMS", "603")
                .d("PRODUCTS_COST", "622")
                .d("DELIVERY_INCLUDED", "true")
            .and().insertInto("CART", 8030L)
                .d("TOTAL_ITEMS", "NULL")
                .d("PRODUCTS_COST", "814")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("CART", 8031L)
                .d("TOTAL_ITEMS", "NULL")
                .d("PRODUCTS_COST", "NULL")
                .d("DELIVERY_INCLUDED", "true")
            .and().insertInto("CUSTOMER_ORDER", 8044L)
                .d("ID", "610")
                .d("USER_ACCOUNT_ID", "-4020971392479202558")
                .d("DATE_CREATED", "NULL")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "311")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "-1985492739")
            .and().insertInto("CUSTOMER_ORDER", 8045L)
                .d("ID", "173")
                .d("USER_ACCOUNT_ID", "5826123394203104601")
                .d("DATE_CREATED", "\"2067-08-12\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "316")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "864")
            .and().insertInto("CUSTOMER_ORDER", 8046L)
                .d("ID", "854")
                .d("USER_ACCOUNT_ID", "NULL")
                .d("DATE_CREATED", "\"2095-01-01\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "580")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "403")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "42")
                .contentType("application/json")
                .body(" { " + 
                    " \"address\": \"NJ\", " + 
                    " \"email\": \"y1tiaWlhB2X7Eh\", " + 
                    " \"name\": \"\\\\ \" " + 
                    " } ")
                .post(baseUrlOfSut + "/register")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/register"))
                .body("'entityName'", containsString("userDTO"))
                .body("'fieldErrors'.size()", equalTo(3))
                .body("'fieldErrors'[0].'field'", containsString("email"))
                .body("'fieldErrors'[0].'message'", containsString("The value shall be in the format of an email address"))
                .body("'fieldErrors'[1].'field'", containsString("name"))
                .body("'fieldErrors'[1].'message'", containsString("Only letters, whitespace, hyphen and apostrophe are allowed"))
                .body("'fieldErrors'[2].'field'", containsString("phone"))
                .body("'fieldErrors'[2].'message'", containsString("The value shall not be empty"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_15() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .put(baseUrlOfSut + "/customer/cart?" + 
                    "name=_EM_278_XYZ_&" + 
                    "EMextraParam123=_EM_327_XYZ_")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/customer/cart"))
                .body("'entityName'", containsString("cartItemDTO"))
                .body("'fieldErrors'.size()", equalTo(2))
                .body("'fieldErrors'[0].'field'", containsString("productId"))
                .body("'fieldErrors'[0].'message'", containsString("Value shall be a positive number"))
                .body("'fieldErrors'[1].'field'", containsString("quantity"))
                .body("'fieldErrors'[1].'message'", containsString("Value shall be a positive number"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(200, 201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_16() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CUSTOMER_ORDER", 175L)
                .d("ID", "8389410")
                .d("USER_ACCOUNT_ID", "16")
                .d("DATE_CREATED", "\"2000-06-16\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "0")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "5058")
            .and().insertInto("CUSTOMER_ORDER", 176L)
                .d("ID", "9071")
                .d("USER_ACCOUNT_ID", "16")
                .d("DATE_CREATED", "\"2088-01-03\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "16384")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "99")
            .and().insertInto("CUSTOMER_ORDER", 177L)
                .d("ID", "0")
                .d("USER_ACCOUNT_ID", "380")
                .d("DATE_CREATED", "\"2077-02-22\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "-8387705")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "0")
            .and().insertInto("CUSTOMER_ORDER", 178L)
                .d("ID", "-33555974")
                .d("USER_ACCOUNT_ID", "1")
                .d("DATE_CREATED", "\"1961-11-16\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "0")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "-4096")
            .and().insertInto("CART", 179L)
                .d("TOTAL_ITEMS", "-5")
                .d("PRODUCTS_COST", "2064460")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("CART", 180L)
                .d("TOTAL_ITEMS", "120")
                .d("PRODUCTS_COST", "0")
                .d("DELIVERY_INCLUDED", "true")
            .and().insertInto("CONTACTS", 181L)
                .d("PHONE", "\"vX0Z3BUE9Y\"")
                .d("ADDRESS", "\"_EM_2801_XYZ_\"")
                .d("CITY_REGION", "\"2JJ\"")
            .and().insertInto("CONTACTS", 182L)
                .d("PHONE", "\"9T\"")
                .d("ADDRESS", "NULL")
                .d("CITY_REGION", "\"_EM_3268_XYZ_\"")
            .and().insertInto("CONTACTS", 183L)
                .d("PHONE", "\"P\"")
                .d("ADDRESS", "\"U_V7y1\"")
                .d("CITY_REGION", "\"2088-01-03\"")
            .and().insertInto("CONTACTS", 184L)
                .d("PHONE", "\"l\"")
                .d("ADDRESS", "\"oHV\"")
                .d("CITY_REGION", "\"_EM_2803_XYZ_\"")
            .and().insertInto("CONTACTS", 185L)
                .d("PHONE", "\"imUwh\"")
                .d("ADDRESS", "\"IIhBc\"")
                .d("CITY_REGION", "\"_EM_3269_XYZ_\"")
            .and().insertInto("USER_ROLE", 186L)
                .d("USER_ID", "-241772589")
                .d("ROLE_ID", "2098077")
            .and().insertInto("USER_ROLE", 187L)
                .d("USER_ID", "65536")
                .d("ROLE_ID", "8385332")
            .and().insertInto("USER_ROLE", 188L)
                .d("USER_ID", "0")
                .d("ROLE_ID", "3351779571330670779")
            .and().insertInto("PRODUCT", 204L)
                .d("NAME", "\"_EM_3270_XYZ_\"")
                .d("DISTILLERY_ID", "0")
                .d("AGE", "109")
                .d("ALCOHOL", "0.0")
                .d("VOLUME", "-268434514")
                .d("PRICE", "0.0")
                .d("DESCRIPTION", "\"_EM_3271_XYZ_K\"")
                .d("AVAILABLE", "true")
            .and().insertInto("ORDERED_PRODUCT", 2018L)
                .d("CUSTOMER_ORDER_ID", "239")
                .d("PRODUCT_ID", "5160044205169999468")
                .d("QUANTITY", "446")
            .and().insertInto("ORDERED_PRODUCT", 2019L)
                .d("CUSTOMER_ORDER_ID", "-2096207")
                .d("PRODUCT_ID", "NULL")
                .d("QUANTITY", "150")
            .and().insertInto("BILL", 2020L)
                .d("NUMBER", "212")
                .d("DATE_CREATED", "NULL")
                .d("TOTAL_COST", "791")
                .d("PAYED", "false")
                .d("CC_NUMBER", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/customer/cart/pay")
                .then()
                .statusCode(406)
                .assertThat()
                .contentType("application/json")
                .body("'message'", containsString("Argument validation error"))
                .body("'description'", containsString("uri=/customer/cart/pay"))
                .body("'entityName'", containsString("creditCardDTO"))
                .body("'fieldErrors'.size()", equalTo(1))
                .body("'fieldErrors'[0].'field'", containsString("ccNumber"))
                .body("'fieldErrors'[0].'message'", containsString("The value shall not be empty"));
        
        expectationHandler.expect(ems)
            .that(sco, Arrays.asList(201, 401, 403, 404).contains(res_0.extract().statusCode()));
    }


}
