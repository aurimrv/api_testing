package market;

import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.sql.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-05-02T19:35:15.209-03:00[America/Araguaina]
 * <br>
 * The generated test suite contains 13 tests
 * <br>
 * Covered targets: 743
 * <br>
 * Used time: 1h 0m 7s
 * <br>
 * Needed budget for current results: 83%
 * <br>
 * This file contains test cases that represent successful calls.
 */
public class seed04_EvoMaster_successes_Test {

    
    private static final SutHandler controller = new em.embedded.market.EmbeddedEvoMasterController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    /**
    * rso - response structure oracle - checking that the response objects match the responses defined in the schema
    */
    private static boolean rso = false;
    
    
    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @BeforeEach
    public void initTest() {
        controller.resetDatabase(Arrays.asList("USER_ROLE","CUSTOMER_ORDER","PRODUCT","DISTILLERY","USER_ACCOUNT","CART","cart_item","CONTACTS","ORDERED_PRODUCT","BILL"));
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test @Timeout(60)
    public void test_0() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/v2/api-docs")
                .then()
                .statusCode(200);
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
    }
    
    
    @Test @Timeout(60)
    public void test_1() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/contacts?" + 
                    "name=_EM_244_XYZ_&" + 
                    "EMextraParam123=_EM_245_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'phone'", containsString("+7 123 456 78 90"))
                .body("'address'", containsString("Riesstrasse 18"));
        
    }
    
    
    @Test @Timeout(60)
    public void test_2() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("x-EMextraHeader123", "_EM_19_XYZ_")
                .get(baseUrlOfSut + "/products?EMextraParam123=_EM_18_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(11))
                .body("[0].'productId'", numberMatches(1.0))
                .body("[0].'distillery'", containsString("Ardbeg"))
                .body("[0].'name'", containsString("Ten"))
                .body("[0].'price'", numberMatches(4420.0))
                .body("[0].'age'", numberMatches(10.0))
                .body("[0].'volume'", numberMatches(700.0))
                .body("[0].'alcohol'", numberMatches(46.0))
                .body("[0].'description'", containsString("Ten Years Old is the basis of the Ardbeg range. After 10 years of maturation in ex-bourbon casks, the whiskey bottled at 46% ABV without cold filtering. The characteristic peat, although clearly present but in perfect balance with the natural sweetness and not predominant in the taste."))
                .body("[0].'available'", equalTo(false))
                .body("[0].'links'.size()", equalTo(1))
                .body("[0].'links'[0].'rel'", containsString("self"))
                .body("[1].'productId'", numberMatches(2.0))
                .body("[1].'distillery'", containsString("Ardbeg"))
                .body("[1].'name'", containsString("Uigeadail"))
                .body("[1].'price'", numberMatches(7020.0))
                .body("[1].'age'", numberMatches(0.0))
                .body("[1].'volume'", numberMatches(700.0))
                .body("[1].'alcohol'", numberMatches(54.2))
                .body("[1].'description'", containsString("Ardbeg Uigedael is named after Loch Uigedael, the lake in the grounds of the distillery Ardbeg which are the water is an important factor in the distilling process. The Uigedael a vatted malt, bottled at 54.2% ABV without cold filtering. Ardbeg Uigedael has no age indication for the expression consists of various malts of different ages. Malts are used partly matured in ex-bourbon and partly on ex-sherry casks."))
                .body("[1].'available'", equalTo(true))
                .body("[1].'links'.size()", equalTo(1))
                .body("[1].'links'[0].'rel'", containsString("self"))
                .body("[2].'productId'", numberMatches(3.0))
                .body("[2].'distillery'", containsString("Balvenie"))
                .body("[2].'name'", containsString("12 y.o. Doublewood"))
                .body("[2].'price'", numberMatches(5403.0))
                .body("[2].'age'", numberMatches(12.0))
                .body("[2].'volume'", numberMatches(700.0))
                .body("[2].'alcohol'", numberMatches(40.0))
                .body("[2].'description'", containsString("Has clear influences from both bourbon and sherry wood. This malt has only 12 years aged in bourbon casks and then 3 months in young Oloroso casks. The peppery character from the bourbon barrels, penetrates, as it were by the rich and full aroma of Oloroso casks it. The Balvenie Double Wood is therefore a very complex malt."))
                .body("[2].'available'", equalTo(true))
                .body("[2].'links'.size()", equalTo(1))
                .body("[2].'links'[0].'rel'", containsString("self"))
                ; // Skipping assertions on the remaining 8 elements. This limit of 3 elements can be increased in the configurations
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("alcohol", "price", "volume")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(1)).keySet().containsAll(Arrays.asList("alcohol", "price", "volume")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(2)).keySet().containsAll(Arrays.asList("alcohol", "price", "volume")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(3)).keySet().containsAll(Arrays.asList("alcohol", "price", "volume")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(4)).keySet().containsAll(Arrays.asList("alcohol", "price", "volume")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(5)).keySet().containsAll(Arrays.asList("alcohol", "price", "volume")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(6)).keySet().containsAll(Arrays.asList("alcohol", "price", "volume")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(7)).keySet().containsAll(Arrays.asList("alcohol", "price", "volume")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(8)).keySet().containsAll(Arrays.asList("alcohol", "price", "volume")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(9)).keySet().containsAll(Arrays.asList("alcohol", "price", "volume")))
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(10)).keySet().containsAll(Arrays.asList("alcohol", "price", "volume")));
    }
    
    
    @Test @Timeout(60)
    public void test_3() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer?" + 
                    "name=_EM_252_XYZ_&" + 
                    "EMextraParam123=_EM_253_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'email'", containsString("ivan.petrov@yandex.ru"))
                .body("'password'", containsString("hidden"))
                .body("'name'", containsString("Ivan Petrov"))
                .body("'phone'", containsString("+7 123 456 78 90"))
                .body("'address'", containsString("Riesstrasse 18"));
        
    }
    
    
    @Test @Timeout(60)
    public void test_4() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "_EM_1109_XYZ_")
                .get(baseUrlOfSut + "/products/2?EMextraParam123=_EM_1108_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'productId'", numberMatches(2.0))
                .body("'distillery'", containsString("Ardbeg"))
                .body("'name'", containsString("Uigeadail"))
                .body("'price'", numberMatches(7020.0))
                .body("'age'", numberMatches(0.0))
                .body("'volume'", numberMatches(700.0))
                .body("'alcohol'", numberMatches(54.2))
                .body("'description'", containsString("Ardbeg Uigedael is named after Loch Uigedael, the lake in the grounds of the distillery Ardbeg which are the water is an important factor in the distilling process. The Uigedael a vatted malt, bottled at 54.2% ABV without cold filtering. Ardbeg Uigedael has no age indication for the expression consists of various malts of different ages. Malts are used partly matured in ex-bourbon and partly on ex-sherry casks."))
                .body("'available'", equalTo(true));
        
    }
    
    
    @Test @Timeout(60)
    public void test_5() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USER_ROLE", 3394L)
                .d("USER_ID", "0")
                .d("ROLE_ID", "325")
            .and().insertInto("USER_ROLE", 3395L)
                .d("USER_ID", "1049467")
                .d("ROLE_ID", "3166255413906102786")
            .and().insertInto("USER_ROLE", 3396L)
                .d("USER_ID", "-131198")
                .d("ROLE_ID", "-130788")
            .and().insertInto("CUSTOMER_ORDER", 3397L)
                .d("ID", "0")
                .d("USER_ACCOUNT_ID", "1057615")
                .d("DATE_CREATED", "\"2063-07-30\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "399")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "-261690")
            .and().insertInto("CUSTOMER_ORDER", 3398L)
                .d("ID", "905")
                .d("USER_ACCOUNT_ID", "351")
                .d("DATE_CREATED", "\"2023-06-05\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "-524769")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "-3616")
            .and().insertInto("PRODUCT", 3399L)
                .d("NAME", "\"WuTxh\"")
                .d("DISTILLERY_ID", "0")
                .d("AGE", "-25")
                .d("ALCOHOL", "3113.5392094786066")
                .d("VOLUME", "514")
                .d("PRICE", "0.0")
                .d("DESCRIPTION", "\"CY3j\"")
                .d("AVAILABLE", "false")
            .and().insertInto("PRODUCT", 3400L)
                .d("NAME", "\"DYKXOyN4p\"")
                .d("DISTILLERY_ID", "5130019728505405900")
                .d("AGE", "-742")
                .d("ALCOHOL", "0.0")
                .d("VOLUME", "0")
                .d("PRICE", "-0.16273526394636795")
                .d("DESCRIPTION", "NULL")
                .d("AVAILABLE", "true")
            .and().insertInto("PRODUCT", 3401L)
                .d("NAME", "\"3\"")
                .d("DISTILLERY_ID", "-8461371535280823690")
                .d("AGE", "343")
                .d("ALCOHOL", "-11832.54597062197")
                .d("VOLUME", "517")
                .d("PRICE", "0.0")
                .d("DESCRIPTION", "\"_EM_11738_XYZ_\"")
                .d("AVAILABLE", "true")
            .and().insertInto("PRODUCT", 3402L)
                .d("NAME", "\"dnWC_pWhTz1Y\"")
                .d("DISTILLERY_ID", "385")
                .d("AGE", "-31973")
                .d("ALCOHOL", "-9191.607298378747")
                .d("VOLUME", "0")
                .d("PRICE", "0.7576390593137129")
                .d("DESCRIPTION", "NULL")
                .d("AVAILABLE", "true")
            .and().insertInto("PRODUCT", 3403L)
                .d("NAME", "\"_EM_11731_XYZ_\"")
                .d("DISTILLERY_ID", "-9081080852973666294")
                .d("AGE", "NULL")
                .d("ALCOHOL", "0.22849050820641037")
                .d("VOLUME", "884")
                .d("PRICE", "-0.3355875349882522")
                .d("DESCRIPTION", "\"_EM_11725_XYZ_\"")
                .d("AVAILABLE", "true")
            .and().insertInto("DISTILLERY", 3405L)
                .d("TITLE", "\"_EM_11726_XYZ_\"")
                .d("REGION_ID", "0")
                .d("DESCRIPTION", "\"i\"")
            .and().insertInto("DISTILLERY", 3406L)
                .d("TITLE", "\"Iu8xf8NnFyvFz7\"")
                .d("REGION_ID", "0")
                .d("DESCRIPTION", "\"_EM_11727_XYZ_\"")
            .and().insertInto("USER_ACCOUNT", 3774L)
                .d("EMAIL", "\"ThL3t\"")
                .d("PASSWORD", "\"2\"")
                .d("NAME", "\"0ragxHcDna6\"")
                .d("ACTIVE", "true")
            .and().insertInto("USER_ACCOUNT", 3775L)
                .d("EMAIL", "\"ctEVk4PBWtsNuy9\"")
                .d("PASSWORD", "\"pBu94FkhDctBx\"")
                .d("NAME", "NULL")
                .d("ACTIVE", "true")
            .and().insertInto("USER_ACCOUNT", 3776L)
                .d("EMAIL", "\"SDl\"")
                .d("PASSWORD", "NULL")
                .d("NAME", "NULL")
                .d("ACTIVE", "false")
            .and().insertInto("USER_ACCOUNT", 3777L)
                .d("EMAIL", "\"6\"")
                .d("PASSWORD", "NULL")
                .d("NAME", "NULL")
                .d("ACTIVE", "false")
            .and().insertInto("USER_ACCOUNT", 3778L)
                .d("EMAIL", "\"Nt7vwdz4PW_jaj5\"")
                .d("PASSWORD", "\"2QCnZbbz8Q45jyqF\"")
                .d("NAME", "NULL")
                .d("ACTIVE", "false")
            .and().insertInto("CART", 2318L)
                .d("TOTAL_ITEMS", "-261715")
                .d("PRODUCTS_COST", "524841")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("PRODUCT", 2319L)
                .d("NAME", "NULL")
                .d("DISTILLERY_ID", "-4611686018427388864")
                .d("AGE", "1177")
                .d("ALCOHOL", "0.7484159464850058")
                .d("VOLUME", "702")
                .d("PRICE", "-0.28437744461556386")
                .d("DESCRIPTION", "\"_EM_11739_XYZ_\"")
                .d("AVAILABLE", "false")
            .and().insertInto("CUSTOMER_ORDER", 2320L)
                .d("ID", "0")
                .d("USER_ACCOUNT_ID", "506")
                .d("DATE_CREATED", "\"1989-04-18\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "441")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "70")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/orders/1?" + 
                    "name=_EM_11724_XYZ_&" + 
                    "included=_EM_11358_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'userAccount'", containsString("ivan.petrov@yandex.ru"))
                .body("'billNumber'", numberMatches(2.7132054E8))
                .body("'dateCreated'", containsString("2019-12-27T03:00:00.000+00:00"))
                .body("'productsCost'", numberMatches(8127.0))
                .body("'deliveryCost'", numberMatches(400.0))
                .body("'deliveryIncluded'", equalTo(true))
                .body("'totalCost'", numberMatches(8527.0))
                .body("'payed'", equalTo(true))
                .body("'executed'", equalTo(false));
        
    }
    
    
    @Test @Timeout(60)
    public void test_6() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic YWRtaW46cGFzc3dvcmQ=") // admin
                .header("x-EMextraHeader123", "")
                .delete(baseUrlOfSut + "/customer/cart?name=_EM_151_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'user'", containsString("admin"))
                .body("'totalItems'", numberMatches(0.0))
                .body("'productsCost'", numberMatches(0.0))
                .body("'deliveryCost'", numberMatches(400.0))
                .body("'deliveryIncluded'", equalTo(true))
                .body("'totalCost'", numberMatches(400.0))
                .body("'cartItems'.size()", equalTo(0))
                .body("'empty'", equalTo(true));
        
    }
    
    
    @Test @Timeout(60)
    public void test_7() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/orders?name=_EM_247_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'userAccount'", containsString("ivan.petrov@yandex.ru"))
                .body("[0].'billNumber'", numberMatches(2.7132054E8))
                .body("[0].'dateCreated'", containsString("2019-12-27T03:00:00.000+00:00"))
                .body("[0].'productsCost'", numberMatches(8127.0))
                .body("[0].'deliveryCost'", numberMatches(400.0))
                .body("[0].'deliveryIncluded'", equalTo(true))
                .body("[0].'totalCost'", numberMatches(8527.0))
                .body("[0].'payed'", equalTo(true))
                .body("[0].'executed'", equalTo(false))
                .body("[0].'links'.size()", equalTo(0));
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_0.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList()));
    }
    
    
    @Test @Timeout(60)
    public void test_8() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/customer/cart")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'user'", containsString("ivan.petrov@yandex.ru"))
                .body("'totalItems'", numberMatches(1.0))
                .body("'productsCost'", numberMatches(6517.0))
                .body("'deliveryCost'", numberMatches(400.0))
                .body("'deliveryIncluded'", equalTo(true))
                .body("'totalCost'", numberMatches(6917.0))
                .body("'cartItems'.size()", equalTo(1))
                .body("'cartItems'[0].'productId'", numberMatches(5.0))
                .body("'cartItems'[0].'quantity'", numberMatches(1.0))
                .body("'empty'", equalTo(false));
        
    }
    
    
    @Test @Timeout(60)
    public void test_9() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("CUSTOMER_ORDER", 175L)
                .d("ID", "8389410")
                .d("USER_ACCOUNT_ID", "16")
                .d("DATE_CREATED", "\"2000-06-16\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "0")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "5058")
            .and().insertInto("CUSTOMER_ORDER", 176L)
                .d("ID", "9071")
                .d("USER_ACCOUNT_ID", "16")
                .d("DATE_CREATED", "\"2088-01-03\"")
                .d("EXECUTED", "false")
                .d("PRODUCTS_COST", "16384")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "99")
            .and().insertInto("CUSTOMER_ORDER", 177L)
                .d("ID", "0")
                .d("USER_ACCOUNT_ID", "380")
                .d("DATE_CREATED", "\"2077-02-22\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "-8387705")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "0")
            .and().insertInto("CUSTOMER_ORDER", 178L)
                .d("ID", "-33555974")
                .d("USER_ACCOUNT_ID", "1")
                .d("DATE_CREATED", "\"1961-11-16\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "0")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "-4096")
            .and().insertInto("CART", 179L)
                .d("TOTAL_ITEMS", "-5")
                .d("PRODUCTS_COST", "2064460")
                .d("DELIVERY_INCLUDED", "false")
            .and().insertInto("CART", 180L)
                .d("TOTAL_ITEMS", "120")
                .d("PRODUCTS_COST", "0")
                .d("DELIVERY_INCLUDED", "true")
            .and().insertInto("CONTACTS", 181L)
                .d("PHONE", "\"vX0Z3BUE9Y\"")
                .d("ADDRESS", "\"_EM_2801_XYZ_\"")
                .d("CITY_REGION", "\"2JJ\"")
            .and().insertInto("CONTACTS", 182L)
                .d("PHONE", "\"9T\"")
                .d("ADDRESS", "NULL")
                .d("CITY_REGION", "\"_EM_3268_XYZ_\"")
            .and().insertInto("CONTACTS", 183L)
                .d("PHONE", "\"P\"")
                .d("ADDRESS", "\"U_V7y1\"")
                .d("CITY_REGION", "\"2088-01-03\"")
            .and().insertInto("CONTACTS", 184L)
                .d("PHONE", "\"l\"")
                .d("ADDRESS", "\"oHV\"")
                .d("CITY_REGION", "\"_EM_2803_XYZ_\"")
            .and().insertInto("CONTACTS", 185L)
                .d("PHONE", "\"imUwh\"")
                .d("ADDRESS", "\"IIhBc\"")
                .d("CITY_REGION", "\"_EM_3269_XYZ_\"")
            .and().insertInto("USER_ROLE", 186L)
                .d("USER_ID", "-241772589")
                .d("ROLE_ID", "2098077")
            .and().insertInto("USER_ROLE", 187L)
                .d("USER_ID", "65536")
                .d("ROLE_ID", "8385332")
            .and().insertInto("USER_ROLE", 188L)
                .d("USER_ID", "0")
                .d("ROLE_ID", "3351779571330670779")
            .and().insertInto("PRODUCT", 204L)
                .d("NAME", "\"_EM_3270_XYZ_\"")
                .d("DISTILLERY_ID", "0")
                .d("AGE", "109")
                .d("ALCOHOL", "0.0")
                .d("VOLUME", "-268434514")
                .d("PRICE", "0.0")
                .d("DESCRIPTION", "\"_EM_3271_XYZ_K\"")
                .d("AVAILABLE", "true")
            .and().insertInto("ORDERED_PRODUCT", 2018L)
                .d("CUSTOMER_ORDER_ID", "239")
                .d("PRODUCT_ID", "5160044205169999468")
                .d("QUANTITY", "446")
            .and().insertInto("ORDERED_PRODUCT", 2019L)
                .d("CUSTOMER_ORDER_ID", "-2096207")
                .d("PRODUCT_ID", "NULL")
                .d("QUANTITY", "150")
            .and().insertInto("BILL", 2020L)
                .d("NUMBER", "212")
                .d("DATE_CREATED", "NULL")
                .d("TOTAL_COST", "791")
                .d("PAYED", "false")
                .d("CC_NUMBER", "NULL")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .put(baseUrlOfSut + "/customer/cart/delivery?included=true")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'user'", containsString("ivan.petrov@yandex.ru"))
                .body("'totalItems'", numberMatches(1.0))
                .body("'productsCost'", numberMatches(6517.0))
                .body("'deliveryCost'", numberMatches(400.0))
                .body("'deliveryIncluded'", equalTo(true))
                .body("'totalCost'", numberMatches(6917.0))
                .body("'cartItems'.size()", equalTo(1))
                .body("'cartItems'[0].'productId'", numberMatches(5.0))
                .body("'cartItems'[0].'quantity'", numberMatches(1.0))
                .body("'empty'", equalTo(false));
        
    }
    
    
    @Test @Timeout(60)
    public void test_10() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"productId\": 11, " + 
                    " \"quantity\": 895 " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/cart?name=j")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'user'", containsString("ivan.petrov@yandex.ru"))
                .body("'totalItems'", numberMatches(1.0))
                .body("'productsCost'", numberMatches(6517.0))
                .body("'deliveryCost'", numberMatches(400.0))
                .body("'deliveryIncluded'", equalTo(true))
                .body("'totalCost'", numberMatches(6917.0))
                .body("'cartItems'.size()", equalTo(1))
                .body("'cartItems'[0].'productId'", numberMatches(5.0))
                .body("'cartItems'[0].'quantity'", numberMatches(1.0))
                .body("'empty'", equalTo(false));
        
    }
    
    
    @Test @Timeout(60)
    public void test_11() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("USER_ROLE", 6317L)
                .d("USER_ID", "NULL")
                .d("ROLE_ID", "189")
            .and().insertInto("USER_ROLE", 6318L)
                .d("USER_ID", "NULL")
                .d("ROLE_ID", "781")
            .and().insertInto("USER_ROLE", 6319L)
                .d("USER_ID", "882")
                .d("ROLE_ID", "341658780380578930")
            .and().insertInto("PRODUCT", 6328L)
                .d("NAME", "NULL")
                .d("DISTILLERY_ID", "NULL")
                .d("AGE", "87")
                .d("ALCOHOL", "0.5271615033256574")
                .d("VOLUME", "569")
                .d("PRICE", "0.16151446515343337")
                .d("DESCRIPTION", "NULL")
                .d("AVAILABLE", "false")
            .and().insertInto("PRODUCT", 6329L)
                .d("NAME", "NULL")
                .d("DISTILLERY_ID", "126")
                .d("AGE", "376")
                .d("ALCOHOL", "0.42000025823420783")
                .d("VOLUME", "868")
                .d("PRICE", "0.6369322605479026")
                .d("DESCRIPTION", "\"OvSLBoRKwyTx\"")
                .d("AVAILABLE", "true")
            .and().insertInto("CUSTOMER_ORDER", 6376L)
                .d("ID", "94")
                .d("USER_ACCOUNT_ID", "NULL")
                .d("DATE_CREATED", "NULL")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "570")
                .d("DELIVERY_INCLUDED", "false")
                .d("DELIVERY_COST", "202")
            .and().insertInto("CUSTOMER_ORDER", 6377L)
                .d("ID", "438")
                .d("USER_ACCOUNT_ID", "995")
                .d("DATE_CREATED", "\"2096-08-04\"")
                .d("EXECUTED", "true")
                .d("PRODUCTS_COST", "139")
                .d("DELIVERY_INCLUDED", "true")
                .d("DELIVERY_COST", "94")
            .dtos();
        InsertionResultsDto insertionsresult = controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"productId\": 9, " + 
                    " \"quantity\": 967 " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/cart?name=j")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'user'", containsString("ivan.petrov@yandex.ru"))
                .body("'totalItems'", numberMatches(2.0))
                .body("'productsCost'", numberMatches(1.4018347E7))
                .body("'deliveryCost'", numberMatches(400.0))
                .body("'deliveryIncluded'", equalTo(true))
                .body("'totalCost'", numberMatches(1.4018747E7))
                .body("'cartItems'.size()", equalTo(2))
                .body("'cartItems'[0].'productId'", numberMatches(5.0))
                .body("'cartItems'[0].'quantity'", numberMatches(1.0))
                .body("'cartItems'[1].'productId'", numberMatches(9.0))
                .body("'cartItems'[1].'quantity'", numberMatches(967.0))
                .body("'empty'", equalTo(false));
        
    }
    
    
    @Test @Timeout(60)
    public void test_12() throws Exception {
        
        given().accept("*/*")
                .header("Authorization", "Basic aXZhbi5wZXRyb3ZAeWFuZGV4LnJ1OnBldHJvdg==") // user
                .header("x-EMextraHeader123", "")
                .contentType("application/json")
                .body(" { " + 
                    " \"productId\": 3, " + 
                    " \"quantity\": 887 " + 
                    " } ")
                .put(baseUrlOfSut + "/customer/cart?name=h")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/hal+json")
                .body("'user'", containsString("ivan.petrov@yandex.ru"))
                .body("'totalItems'", numberMatches(2.0))
                .body("'productsCost'", numberMatches(4798978.0))
                .body("'deliveryCost'", numberMatches(400.0))
                .body("'deliveryIncluded'", equalTo(true))
                .body("'totalCost'", numberMatches(4799378.0))
                .body("'cartItems'.size()", equalTo(2))
                .body("'cartItems'[0].'productId'", numberMatches(5.0))
                .body("'cartItems'[0].'quantity'", numberMatches(1.0))
                .body("'cartItems'[1].'productId'", numberMatches(3.0))
                .body("'cartItems'[1].'quantity'", numberMatches(887.0))
                .body("'empty'", equalTo(false));
        
    }


}
